program(1.0)
[buildInfo = dict<tensor<string, []>, tensor<string, []>>({{"coremlc-component-MIL", "3404.16.1"}, {"coremlc-version", "3404.24.1"}, {"coremltools-component-torch", "2.7.1"}, {"coremltools-source-dialect", "TorchScript"}, {"coremltools-version", "8.3.0"}})]
{
    func main<ios15>(tensor<fp32, [2, 1024, 216]> magnitude) {
            tensor<int32, [1]> var_12_axes_0 = const()[name = tensor<string, []>("op_12_axes_0"), val = tensor<int32, [1]>([-1])];
            tensor<string, []> stft_mag_1_to_fp16_dtype_0 = const()[name = tensor<string, []>("stft_mag_1_to_fp16_dtype_0"), val = tensor<string, []>("fp16")];
            tensor<fp16, [2, 1024, 216]> stft_mag_1_to_fp16 = cast(dtype = stft_mag_1_to_fp16_dtype_0, x = magnitude)[name = tensor<string, []>("cast_6")];
            tensor<fp16, [2, 1024, 216, 1]> var_12_cast_fp16 = expand_dims(axes = var_12_axes_0, x = stft_mag_1_to_fp16)[name = tensor<string, []>("op_12_cast_fp16")];
            tensor<int32, [4]> var_17 = const()[name = tensor<string, []>("op_17"), val = tensor<int32, [4]>([3, 0, 1, 2])];
            tensor<int32, [8]> tensor_pad_0 = const()[name = tensor<string, []>("tensor_pad_0"), val = tensor<int32, [8]>([0, 0, 0, 0, 0, 0, 0, 296])];
            tensor<string, []> tensor_mode_0 = const()[name = tensor<string, []>("tensor_mode_0"), val = tensor<string, []>("constant")];
            tensor<fp16, []> const_2_to_fp16 = const()[name = tensor<string, []>("const_2_to_fp16"), val = tensor<fp16, []>(0x0p+0)];
            tensor<fp16, [1, 2, 1024, 216]> tensor_1_cast_fp16 = transpose(perm = var_17, x = var_12_cast_fp16)[name = tensor<string, []>("transpose_3")];
            tensor<fp16, [1, 2, 1024, 512]> tensor_cast_fp16 = pad(constant_val = const_2_to_fp16, mode = tensor_mode_0, pad = tensor_pad_0, x = tensor_1_cast_fp16)[name = tensor<string, []>("tensor_cast_fp16")];
            tensor<int32, []> var_36 = const()[name = tensor<string, []>("op_36"), val = tensor<int32, []>(0)];
            tensor<bool, []> stft_mag_interleave_0 = const()[name = tensor<string, []>("stft_mag_interleave_0"), val = tensor<bool, []>(false)];
            tensor<fp16, [1, 2, 1024, 512]> stft_mag_cast_fp16 = concat(axis = var_36, interleave = stft_mag_interleave_0, values = tensor_cast_fp16)[name = tensor<string, []>("stft_mag_cast_fp16")];
            tensor<int32, [4]> input_1_perm_0 = const()[name = tensor<string, []>("input_1_perm_0"), val = tensor<int32, [4]>([0, 1, 3, 2])];
            tensor<int32, []> var_51 = const()[name = tensor<string, []>("op_51"), val = tensor<int32, []>(1)];
            tensor<int32, [8]> input_3_pad_0 = const()[name = tensor<string, []>("input_3_pad_0"), val = tensor<int32, [8]>([0, 0, 0, 0, 1, 2, 1, 2])];
            tensor<string, []> input_3_mode_0 = const()[name = tensor<string, []>("input_3_mode_0"), val = tensor<string, []>("constant")];
            tensor<fp16, []> const_5_to_fp16 = const()[name = tensor<string, []>("const_5_to_fp16"), val = tensor<fp16, []>(0x0p+0)];
            tensor<fp16, [1, 2, 512, 1024]> input_1_cast_fp16 = transpose(perm = input_1_perm_0, x = stft_mag_cast_fp16)[name = tensor<string, []>("transpose_2")];
            tensor<fp16, [1, 2, 515, 1027]> input_3_cast_fp16 = pad(constant_val = const_5_to_fp16, mode = input_3_mode_0, pad = input_3_pad_0, x = input_1_cast_fp16)[name = tensor<string, []>("input_3_cast_fp16")];
            tensor<string, []> input_5_pad_type_0 = const()[name = tensor<string, []>("input_5_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_5_strides_0 = const()[name = tensor<string, []>("input_5_strides_0"), val = tensor<int32, [2]>([2, 2])];
            tensor<int32, [4]> input_5_pad_0 = const()[name = tensor<string, []>("input_5_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_5_dilations_0 = const()[name = tensor<string, []>("input_5_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_5_groups_0 = const()[name = tensor<string, []>("input_5_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [16, 2, 5, 5]> instruments_0_down1_conv_1_weight_to_fp16 = const()[name = tensor<string, []>("instruments_0_down1_conv_1_weight_to_fp16"), val = tensor<fp16, [16, 2, 5, 5]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(64)))];
            tensor<fp16, [16]> instruments_0_down1_conv_1_bias_to_fp16 = const()[name = tensor<string, []>("instruments_0_down1_conv_1_bias_to_fp16"), val = tensor<fp16, [16]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1728)))];
            tensor<fp16, [1, 16, 256, 512]> input_5_cast_fp16 = conv(bias = instruments_0_down1_conv_1_bias_to_fp16, dilations = input_5_dilations_0, groups = input_5_groups_0, pad = input_5_pad_0, pad_type = input_5_pad_type_0, strides = input_5_strides_0, weight = instruments_0_down1_conv_1_weight_to_fp16, x = input_3_cast_fp16)[name = tensor<string, []>("input_5_cast_fp16")];
            tensor<fp16, [16]> instruments_0_down1_act_0_running_mean_to_fp16 = const()[name = tensor<string, []>("instruments_0_down1_act_0_running_mean_to_fp16"), val = tensor<fp16, [16]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1856)))];
            tensor<fp16, [16]> instruments_0_down1_act_0_running_var_to_fp16 = const()[name = tensor<string, []>("instruments_0_down1_act_0_running_var_to_fp16"), val = tensor<fp16, [16]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1984)))];
            tensor<fp16, [16]> instruments_0_down1_act_0_weight_to_fp16 = const()[name = tensor<string, []>("instruments_0_down1_act_0_weight_to_fp16"), val = tensor<fp16, [16]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2112)))];
            tensor<fp16, [16]> instruments_0_down1_act_0_bias_to_fp16 = const()[name = tensor<string, []>("instruments_0_down1_act_0_bias_to_fp16"), val = tensor<fp16, [16]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2240)))];
            tensor<fp16, []> var_45_to_fp16 = const()[name = tensor<string, []>("op_45_to_fp16"), val = tensor<fp16, []>(0x1.064p-10)];
            tensor<fp16, [1, 16, 256, 512]> input_7_cast_fp16 = batch_norm(beta = instruments_0_down1_act_0_bias_to_fp16, epsilon = var_45_to_fp16, gamma = instruments_0_down1_act_0_weight_to_fp16, mean = instruments_0_down1_act_0_running_mean_to_fp16, variance = instruments_0_down1_act_0_running_var_to_fp16, x = input_5_cast_fp16)[name = tensor<string, []>("input_7_cast_fp16")];
            tensor<fp16, []> var_47_to_fp16 = const()[name = tensor<string, []>("op_47_to_fp16"), val = tensor<fp16, []>(0x1.998p-3)];
            tensor<fp16, [1, 16, 256, 512]> input_9_cast_fp16 = leaky_relu(alpha = var_47_to_fp16, x = input_7_cast_fp16)[name = tensor<string, []>("input_9_cast_fp16")];
            tensor<int32, [8]> input_11_pad_0 = const()[name = tensor<string, []>("input_11_pad_0"), val = tensor<int32, [8]>([0, 0, 0, 0, 1, 2, 1, 2])];
            tensor<string, []> input_11_mode_0 = const()[name = tensor<string, []>("input_11_mode_0"), val = tensor<string, []>("constant")];
            tensor<fp16, []> const_6_to_fp16 = const()[name = tensor<string, []>("const_6_to_fp16"), val = tensor<fp16, []>(0x0p+0)];
            tensor<fp16, [1, 16, 259, 515]> input_11_cast_fp16 = pad(constant_val = const_6_to_fp16, mode = input_11_mode_0, pad = input_11_pad_0, x = input_9_cast_fp16)[name = tensor<string, []>("input_11_cast_fp16")];
            tensor<string, []> input_13_pad_type_0 = const()[name = tensor<string, []>("input_13_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_13_strides_0 = const()[name = tensor<string, []>("input_13_strides_0"), val = tensor<int32, [2]>([2, 2])];
            tensor<int32, [4]> input_13_pad_0 = const()[name = tensor<string, []>("input_13_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_13_dilations_0 = const()[name = tensor<string, []>("input_13_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_13_groups_0 = const()[name = tensor<string, []>("input_13_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [32, 16, 5, 5]> instruments_0_down2_conv_1_weight_to_fp16 = const()[name = tensor<string, []>("instruments_0_down2_conv_1_weight_to_fp16"), val = tensor<fp16, [32, 16, 5, 5]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2368)))];
            tensor<fp16, [32]> instruments_0_down2_conv_1_bias_to_fp16 = const()[name = tensor<string, []>("instruments_0_down2_conv_1_bias_to_fp16"), val = tensor<fp16, [32]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(28032)))];
            tensor<fp16, [1, 32, 128, 256]> input_13_cast_fp16 = conv(bias = instruments_0_down2_conv_1_bias_to_fp16, dilations = input_13_dilations_0, groups = input_13_groups_0, pad = input_13_pad_0, pad_type = input_13_pad_type_0, strides = input_13_strides_0, weight = instruments_0_down2_conv_1_weight_to_fp16, x = input_11_cast_fp16)[name = tensor<string, []>("input_13_cast_fp16")];
            tensor<fp16, [32]> instruments_0_down2_act_0_running_mean_to_fp16 = const()[name = tensor<string, []>("instruments_0_down2_act_0_running_mean_to_fp16"), val = tensor<fp16, [32]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(28160)))];
            tensor<fp16, [32]> instruments_0_down2_act_0_running_var_to_fp16 = const()[name = tensor<string, []>("instruments_0_down2_act_0_running_var_to_fp16"), val = tensor<fp16, [32]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(28288)))];
            tensor<fp16, [32]> instruments_0_down2_act_0_weight_to_fp16 = const()[name = tensor<string, []>("instruments_0_down2_act_0_weight_to_fp16"), val = tensor<fp16, [32]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(28416)))];
            tensor<fp16, [32]> instruments_0_down2_act_0_bias_to_fp16 = const()[name = tensor<string, []>("instruments_0_down2_act_0_bias_to_fp16"), val = tensor<fp16, [32]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(28544)))];
            tensor<fp16, [1, 32, 128, 256]> input_15_cast_fp16 = batch_norm(beta = instruments_0_down2_act_0_bias_to_fp16, epsilon = var_45_to_fp16, gamma = instruments_0_down2_act_0_weight_to_fp16, mean = instruments_0_down2_act_0_running_mean_to_fp16, variance = instruments_0_down2_act_0_running_var_to_fp16, x = input_13_cast_fp16)[name = tensor<string, []>("input_15_cast_fp16")];
            tensor<fp16, [1, 32, 128, 256]> input_17_cast_fp16 = leaky_relu(alpha = var_47_to_fp16, x = input_15_cast_fp16)[name = tensor<string, []>("input_17_cast_fp16")];
            tensor<int32, [8]> input_19_pad_0 = const()[name = tensor<string, []>("input_19_pad_0"), val = tensor<int32, [8]>([0, 0, 0, 0, 1, 2, 1, 2])];
            tensor<string, []> input_19_mode_0 = const()[name = tensor<string, []>("input_19_mode_0"), val = tensor<string, []>("constant")];
            tensor<fp16, []> const_7_to_fp16 = const()[name = tensor<string, []>("const_7_to_fp16"), val = tensor<fp16, []>(0x0p+0)];
            tensor<fp16, [1, 32, 131, 259]> input_19_cast_fp16 = pad(constant_val = const_7_to_fp16, mode = input_19_mode_0, pad = input_19_pad_0, x = input_17_cast_fp16)[name = tensor<string, []>("input_19_cast_fp16")];
            tensor<string, []> input_21_pad_type_0 = const()[name = tensor<string, []>("input_21_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_21_strides_0 = const()[name = tensor<string, []>("input_21_strides_0"), val = tensor<int32, [2]>([2, 2])];
            tensor<int32, [4]> input_21_pad_0 = const()[name = tensor<string, []>("input_21_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_21_dilations_0 = const()[name = tensor<string, []>("input_21_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_21_groups_0 = const()[name = tensor<string, []>("input_21_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [64, 32, 5, 5]> instruments_0_down3_conv_1_weight_to_fp16 = const()[name = tensor<string, []>("instruments_0_down3_conv_1_weight_to_fp16"), val = tensor<fp16, [64, 32, 5, 5]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(28672)))];
            tensor<fp16, [64]> instruments_0_down3_conv_1_bias_to_fp16 = const()[name = tensor<string, []>("instruments_0_down3_conv_1_bias_to_fp16"), val = tensor<fp16, [64]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(131136)))];
            tensor<fp16, [1, 64, 64, 128]> input_21_cast_fp16 = conv(bias = instruments_0_down3_conv_1_bias_to_fp16, dilations = input_21_dilations_0, groups = input_21_groups_0, pad = input_21_pad_0, pad_type = input_21_pad_type_0, strides = input_21_strides_0, weight = instruments_0_down3_conv_1_weight_to_fp16, x = input_19_cast_fp16)[name = tensor<string, []>("input_21_cast_fp16")];
            tensor<fp16, [64]> instruments_0_down3_act_0_running_mean_to_fp16 = const()[name = tensor<string, []>("instruments_0_down3_act_0_running_mean_to_fp16"), val = tensor<fp16, [64]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(131328)))];
            tensor<fp16, [64]> instruments_0_down3_act_0_running_var_to_fp16 = const()[name = tensor<string, []>("instruments_0_down3_act_0_running_var_to_fp16"), val = tensor<fp16, [64]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(131520)))];
            tensor<fp16, [64]> instruments_0_down3_act_0_weight_to_fp16 = const()[name = tensor<string, []>("instruments_0_down3_act_0_weight_to_fp16"), val = tensor<fp16, [64]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(131712)))];
            tensor<fp16, [64]> instruments_0_down3_act_0_bias_to_fp16 = const()[name = tensor<string, []>("instruments_0_down3_act_0_bias_to_fp16"), val = tensor<fp16, [64]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(131904)))];
            tensor<fp16, [1, 64, 64, 128]> input_23_cast_fp16 = batch_norm(beta = instruments_0_down3_act_0_bias_to_fp16, epsilon = var_45_to_fp16, gamma = instruments_0_down3_act_0_weight_to_fp16, mean = instruments_0_down3_act_0_running_mean_to_fp16, variance = instruments_0_down3_act_0_running_var_to_fp16, x = input_21_cast_fp16)[name = tensor<string, []>("input_23_cast_fp16")];
            tensor<fp16, [1, 64, 64, 128]> input_25_cast_fp16 = leaky_relu(alpha = var_47_to_fp16, x = input_23_cast_fp16)[name = tensor<string, []>("input_25_cast_fp16")];
            tensor<int32, [8]> input_27_pad_0 = const()[name = tensor<string, []>("input_27_pad_0"), val = tensor<int32, [8]>([0, 0, 0, 0, 1, 2, 1, 2])];
            tensor<string, []> input_27_mode_0 = const()[name = tensor<string, []>("input_27_mode_0"), val = tensor<string, []>("constant")];
            tensor<fp16, []> const_8_to_fp16 = const()[name = tensor<string, []>("const_8_to_fp16"), val = tensor<fp16, []>(0x0p+0)];
            tensor<fp16, [1, 64, 67, 131]> input_27_cast_fp16 = pad(constant_val = const_8_to_fp16, mode = input_27_mode_0, pad = input_27_pad_0, x = input_25_cast_fp16)[name = tensor<string, []>("input_27_cast_fp16")];
            tensor<string, []> input_29_pad_type_0 = const()[name = tensor<string, []>("input_29_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_29_strides_0 = const()[name = tensor<string, []>("input_29_strides_0"), val = tensor<int32, [2]>([2, 2])];
            tensor<int32, [4]> input_29_pad_0 = const()[name = tensor<string, []>("input_29_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_29_dilations_0 = const()[name = tensor<string, []>("input_29_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_29_groups_0 = const()[name = tensor<string, []>("input_29_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [128, 64, 5, 5]> instruments_0_down4_conv_1_weight_to_fp16 = const()[name = tensor<string, []>("instruments_0_down4_conv_1_weight_to_fp16"), val = tensor<fp16, [128, 64, 5, 5]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(132096)))];
            tensor<fp16, [128]> instruments_0_down4_conv_1_bias_to_fp16 = const()[name = tensor<string, []>("instruments_0_down4_conv_1_bias_to_fp16"), val = tensor<fp16, [128]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(541760)))];
            tensor<fp16, [1, 128, 32, 64]> input_29_cast_fp16 = conv(bias = instruments_0_down4_conv_1_bias_to_fp16, dilations = input_29_dilations_0, groups = input_29_groups_0, pad = input_29_pad_0, pad_type = input_29_pad_type_0, strides = input_29_strides_0, weight = instruments_0_down4_conv_1_weight_to_fp16, x = input_27_cast_fp16)[name = tensor<string, []>("input_29_cast_fp16")];
            tensor<fp16, [128]> instruments_0_down4_act_0_running_mean_to_fp16 = const()[name = tensor<string, []>("instruments_0_down4_act_0_running_mean_to_fp16"), val = tensor<fp16, [128]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(542080)))];
            tensor<fp16, [128]> instruments_0_down4_act_0_running_var_to_fp16 = const()[name = tensor<string, []>("instruments_0_down4_act_0_running_var_to_fp16"), val = tensor<fp16, [128]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(542400)))];
            tensor<fp16, [128]> instruments_0_down4_act_0_weight_to_fp16 = const()[name = tensor<string, []>("instruments_0_down4_act_0_weight_to_fp16"), val = tensor<fp16, [128]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(542720)))];
            tensor<fp16, [128]> instruments_0_down4_act_0_bias_to_fp16 = const()[name = tensor<string, []>("instruments_0_down4_act_0_bias_to_fp16"), val = tensor<fp16, [128]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(543040)))];
            tensor<fp16, [1, 128, 32, 64]> input_31_cast_fp16 = batch_norm(beta = instruments_0_down4_act_0_bias_to_fp16, epsilon = var_45_to_fp16, gamma = instruments_0_down4_act_0_weight_to_fp16, mean = instruments_0_down4_act_0_running_mean_to_fp16, variance = instruments_0_down4_act_0_running_var_to_fp16, x = input_29_cast_fp16)[name = tensor<string, []>("input_31_cast_fp16")];
            tensor<fp16, [1, 128, 32, 64]> input_33_cast_fp16 = leaky_relu(alpha = var_47_to_fp16, x = input_31_cast_fp16)[name = tensor<string, []>("input_33_cast_fp16")];
            tensor<int32, [8]> input_35_pad_0 = const()[name = tensor<string, []>("input_35_pad_0"), val = tensor<int32, [8]>([0, 0, 0, 0, 1, 2, 1, 2])];
            tensor<string, []> input_35_mode_0 = const()[name = tensor<string, []>("input_35_mode_0"), val = tensor<string, []>("constant")];
            tensor<fp16, []> const_9_to_fp16 = const()[name = tensor<string, []>("const_9_to_fp16"), val = tensor<fp16, []>(0x0p+0)];
            tensor<fp16, [1, 128, 35, 67]> input_35_cast_fp16 = pad(constant_val = const_9_to_fp16, mode = input_35_mode_0, pad = input_35_pad_0, x = input_33_cast_fp16)[name = tensor<string, []>("input_35_cast_fp16")];
            tensor<string, []> input_37_pad_type_0 = const()[name = tensor<string, []>("input_37_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_37_strides_0 = const()[name = tensor<string, []>("input_37_strides_0"), val = tensor<int32, [2]>([2, 2])];
            tensor<int32, [4]> input_37_pad_0 = const()[name = tensor<string, []>("input_37_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_37_dilations_0 = const()[name = tensor<string, []>("input_37_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_37_groups_0 = const()[name = tensor<string, []>("input_37_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [256, 128, 5, 5]> instruments_0_down5_conv_1_weight_to_fp16 = const()[name = tensor<string, []>("instruments_0_down5_conv_1_weight_to_fp16"), val = tensor<fp16, [256, 128, 5, 5]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(543360)))];
            tensor<fp16, [256]> instruments_0_down5_conv_1_bias_to_fp16 = const()[name = tensor<string, []>("instruments_0_down5_conv_1_bias_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2181824)))];
            tensor<fp16, [1, 256, 16, 32]> input_37_cast_fp16 = conv(bias = instruments_0_down5_conv_1_bias_to_fp16, dilations = input_37_dilations_0, groups = input_37_groups_0, pad = input_37_pad_0, pad_type = input_37_pad_type_0, strides = input_37_strides_0, weight = instruments_0_down5_conv_1_weight_to_fp16, x = input_35_cast_fp16)[name = tensor<string, []>("input_37_cast_fp16")];
            tensor<fp16, [256]> instruments_0_down5_act_0_running_mean_to_fp16 = const()[name = tensor<string, []>("instruments_0_down5_act_0_running_mean_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2182400)))];
            tensor<fp16, [256]> instruments_0_down5_act_0_running_var_to_fp16 = const()[name = tensor<string, []>("instruments_0_down5_act_0_running_var_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2182976)))];
            tensor<fp16, [256]> instruments_0_down5_act_0_weight_to_fp16 = const()[name = tensor<string, []>("instruments_0_down5_act_0_weight_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2183552)))];
            tensor<fp16, [256]> instruments_0_down5_act_0_bias_to_fp16 = const()[name = tensor<string, []>("instruments_0_down5_act_0_bias_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2184128)))];
            tensor<fp16, [1, 256, 16, 32]> input_39_cast_fp16 = batch_norm(beta = instruments_0_down5_act_0_bias_to_fp16, epsilon = var_45_to_fp16, gamma = instruments_0_down5_act_0_weight_to_fp16, mean = instruments_0_down5_act_0_running_mean_to_fp16, variance = instruments_0_down5_act_0_running_var_to_fp16, x = input_37_cast_fp16)[name = tensor<string, []>("input_39_cast_fp16")];
            tensor<fp16, [1, 256, 16, 32]> input_41_cast_fp16 = leaky_relu(alpha = var_47_to_fp16, x = input_39_cast_fp16)[name = tensor<string, []>("input_41_cast_fp16")];
            tensor<int32, [8]> input_43_pad_0 = const()[name = tensor<string, []>("input_43_pad_0"), val = tensor<int32, [8]>([0, 0, 0, 0, 1, 2, 1, 2])];
            tensor<string, []> input_43_mode_0 = const()[name = tensor<string, []>("input_43_mode_0"), val = tensor<string, []>("constant")];
            tensor<fp16, []> const_10_to_fp16 = const()[name = tensor<string, []>("const_10_to_fp16"), val = tensor<fp16, []>(0x0p+0)];
            tensor<fp16, [1, 256, 19, 35]> input_43_cast_fp16 = pad(constant_val = const_10_to_fp16, mode = input_43_mode_0, pad = input_43_pad_0, x = input_41_cast_fp16)[name = tensor<string, []>("input_43_cast_fp16")];
            tensor<string, []> input_45_pad_type_0 = const()[name = tensor<string, []>("input_45_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_45_strides_0 = const()[name = tensor<string, []>("input_45_strides_0"), val = tensor<int32, [2]>([2, 2])];
            tensor<int32, [4]> input_45_pad_0 = const()[name = tensor<string, []>("input_45_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_45_dilations_0 = const()[name = tensor<string, []>("input_45_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_45_groups_0 = const()[name = tensor<string, []>("input_45_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [512, 256, 5, 5]> instruments_0_down6_conv_1_weight_to_fp16 = const()[name = tensor<string, []>("instruments_0_down6_conv_1_weight_to_fp16"), val = tensor<fp16, [512, 256, 5, 5]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2184704)))];
            tensor<fp16, [512]> instruments_0_down6_conv_1_bias_to_fp16 = const()[name = tensor<string, []>("instruments_0_down6_conv_1_bias_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(8738368)))];
            tensor<fp16, [1, 512, 8, 16]> input_45_cast_fp16 = conv(bias = instruments_0_down6_conv_1_bias_to_fp16, dilations = input_45_dilations_0, groups = input_45_groups_0, pad = input_45_pad_0, pad_type = input_45_pad_type_0, strides = input_45_strides_0, weight = instruments_0_down6_conv_1_weight_to_fp16, x = input_43_cast_fp16)[name = tensor<string, []>("input_45_cast_fp16")];
            tensor<string, []> x_1_pad_type_0 = const()[name = tensor<string, []>("x_1_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> x_1_strides_0 = const()[name = tensor<string, []>("x_1_strides_0"), val = tensor<int32, [2]>([2, 2])];
            tensor<int32, [4]> x_1_pad_0 = const()[name = tensor<string, []>("x_1_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> x_1_dilations_0 = const()[name = tensor<string, []>("x_1_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> x_1_groups_0 = const()[name = tensor<string, []>("x_1_groups_0"), val = tensor<int32, []>(1)];
            tensor<int32, [4]> x_1_has_output_shape_output_shape_0 = const()[name = tensor<string, []>("x_1_has_output_shape_output_shape_0"), val = tensor<int32, [4]>([1, 256, 19, 35])];
            tensor<fp16, [512, 256, 5, 5]> instruments_0_up1_0_weight_to_fp16 = const()[name = tensor<string, []>("instruments_0_up1_0_weight_to_fp16"), val = tensor<fp16, [512, 256, 5, 5]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(8739456)))];
            tensor<fp16, [256]> instruments_0_up1_0_bias_to_fp16 = const()[name = tensor<string, []>("instruments_0_up1_0_bias_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(15293120)))];
            tensor<fp16, [1, 256, 19, 35]> x_1_has_output_shape_cast_fp16 = conv_transpose(bias = instruments_0_up1_0_bias_to_fp16, dilations = x_1_dilations_0, groups = x_1_groups_0, output_shape = x_1_has_output_shape_output_shape_0, pad = x_1_pad_0, pad_type = x_1_pad_type_0, strides = x_1_strides_0, weight = instruments_0_up1_0_weight_to_fp16, x = input_45_cast_fp16)[name = tensor<string, []>("x_1_has_output_shape_cast_fp16")];
            tensor<int32, [4]> var_179_begin_0 = const()[name = tensor<string, []>("op_179_begin_0"), val = tensor<int32, [4]>([0, 0, 1, 0])];
            tensor<int32, [4]> var_179_end_0 = const()[name = tensor<string, []>("op_179_end_0"), val = tensor<int32, [4]>([1, 256, 17, 35])];
            tensor<bool, [4]> var_179_end_mask_0 = const()[name = tensor<string, []>("op_179_end_mask_0"), val = tensor<bool, [4]>([true, true, false, true])];
            tensor<fp16, [1, 256, 16, 35]> var_179_cast_fp16 = slice_by_index(begin = var_179_begin_0, end = var_179_end_0, end_mask = var_179_end_mask_0, x = x_1_has_output_shape_cast_fp16)[name = tensor<string, []>("op_179_cast_fp16")];
            tensor<int32, [4]> input_49_begin_0 = const()[name = tensor<string, []>("input_49_begin_0"), val = tensor<int32, [4]>([0, 0, 0, 1])];
            tensor<int32, [4]> input_49_end_0 = const()[name = tensor<string, []>("input_49_end_0"), val = tensor<int32, [4]>([1, 256, 16, 33])];
            tensor<bool, [4]> input_49_end_mask_0 = const()[name = tensor<string, []>("input_49_end_mask_0"), val = tensor<bool, [4]>([true, true, true, false])];
            tensor<fp16, [1, 256, 16, 32]> input_49_cast_fp16 = slice_by_index(begin = input_49_begin_0, end = input_49_end_0, end_mask = input_49_end_mask_0, x = var_179_cast_fp16)[name = tensor<string, []>("input_49_cast_fp16")];
            tensor<fp16, [1, 256, 16, 32]> input_51_cast_fp16 = relu(x = input_49_cast_fp16)[name = tensor<string, []>("input_51_cast_fp16")];
            tensor<fp16, [256]> instruments_0_up1_3_weight_to_fp16 = const()[name = tensor<string, []>("instruments_0_up1_3_weight_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(15293696)))];
            tensor<fp16, [256]> instruments_0_up1_3_bias_to_fp16 = const()[name = tensor<string, []>("instruments_0_up1_3_bias_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(15294272)))];
            tensor<fp16, [1, 256, 16, 32]> input_53_cast_fp16 = batch_norm(beta = instruments_0_up1_3_bias_to_fp16, epsilon = var_45_to_fp16, gamma = instruments_0_up1_3_weight_to_fp16, mean = instruments_0_down5_act_0_running_mean_to_fp16, variance = instruments_0_down5_act_0_running_var_to_fp16, x = input_51_cast_fp16)[name = tensor<string, []>("input_53_cast_fp16")];
            tensor<bool, []> input_55_interleave_0 = const()[name = tensor<string, []>("input_55_interleave_0"), val = tensor<bool, []>(false)];
            tensor<fp16, [1, 512, 16, 32]> input_55_cast_fp16 = concat(axis = var_51, interleave = input_55_interleave_0, values = (input_37_cast_fp16, input_53_cast_fp16))[name = tensor<string, []>("input_55_cast_fp16")];
            tensor<string, []> x_3_pad_type_0 = const()[name = tensor<string, []>("x_3_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> x_3_strides_0 = const()[name = tensor<string, []>("x_3_strides_0"), val = tensor<int32, [2]>([2, 2])];
            tensor<int32, [4]> x_3_pad_0 = const()[name = tensor<string, []>("x_3_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> x_3_dilations_0 = const()[name = tensor<string, []>("x_3_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> x_3_groups_0 = const()[name = tensor<string, []>("x_3_groups_0"), val = tensor<int32, []>(1)];
            tensor<int32, [4]> x_3_has_output_shape_output_shape_0 = const()[name = tensor<string, []>("x_3_has_output_shape_output_shape_0"), val = tensor<int32, [4]>([1, 128, 35, 67])];
            tensor<fp16, [512, 128, 5, 5]> instruments_0_up2_0_weight_to_fp16 = const()[name = tensor<string, []>("instruments_0_up2_0_weight_to_fp16"), val = tensor<fp16, [512, 128, 5, 5]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(15294848)))];
            tensor<fp16, [128]> instruments_0_up2_0_bias_to_fp16 = const()[name = tensor<string, []>("instruments_0_up2_0_bias_to_fp16"), val = tensor<fp16, [128]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(18571712)))];
            tensor<fp16, [1, 128, 35, 67]> x_3_has_output_shape_cast_fp16 = conv_transpose(bias = instruments_0_up2_0_bias_to_fp16, dilations = x_3_dilations_0, groups = x_3_groups_0, output_shape = x_3_has_output_shape_output_shape_0, pad = x_3_pad_0, pad_type = x_3_pad_type_0, strides = x_3_strides_0, weight = instruments_0_up2_0_weight_to_fp16, x = input_55_cast_fp16)[name = tensor<string, []>("x_3_has_output_shape_cast_fp16")];
            tensor<int32, [4]> var_201_begin_0 = const()[name = tensor<string, []>("op_201_begin_0"), val = tensor<int32, [4]>([0, 0, 1, 0])];
            tensor<int32, [4]> var_201_end_0 = const()[name = tensor<string, []>("op_201_end_0"), val = tensor<int32, [4]>([1, 128, 33, 67])];
            tensor<bool, [4]> var_201_end_mask_0 = const()[name = tensor<string, []>("op_201_end_mask_0"), val = tensor<bool, [4]>([true, true, false, true])];
            tensor<fp16, [1, 128, 32, 67]> var_201_cast_fp16 = slice_by_index(begin = var_201_begin_0, end = var_201_end_0, end_mask = var_201_end_mask_0, x = x_3_has_output_shape_cast_fp16)[name = tensor<string, []>("op_201_cast_fp16")];
            tensor<int32, [4]> input_57_begin_0 = const()[name = tensor<string, []>("input_57_begin_0"), val = tensor<int32, [4]>([0, 0, 0, 1])];
            tensor<int32, [4]> input_57_end_0 = const()[name = tensor<string, []>("input_57_end_0"), val = tensor<int32, [4]>([1, 128, 32, 65])];
            tensor<bool, [4]> input_57_end_mask_0 = const()[name = tensor<string, []>("input_57_end_mask_0"), val = tensor<bool, [4]>([true, true, true, false])];
            tensor<fp16, [1, 128, 32, 64]> input_57_cast_fp16 = slice_by_index(begin = input_57_begin_0, end = input_57_end_0, end_mask = input_57_end_mask_0, x = var_201_cast_fp16)[name = tensor<string, []>("input_57_cast_fp16")];
            tensor<fp16, [1, 128, 32, 64]> input_59_cast_fp16 = relu(x = input_57_cast_fp16)[name = tensor<string, []>("input_59_cast_fp16")];
            tensor<fp16, [128]> instruments_0_up2_3_weight_to_fp16 = const()[name = tensor<string, []>("instruments_0_up2_3_weight_to_fp16"), val = tensor<fp16, [128]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(18572032)))];
            tensor<fp16, [128]> instruments_0_up2_3_bias_to_fp16 = const()[name = tensor<string, []>("instruments_0_up2_3_bias_to_fp16"), val = tensor<fp16, [128]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(18572352)))];
            tensor<fp16, [1, 128, 32, 64]> input_61_cast_fp16 = batch_norm(beta = instruments_0_up2_3_bias_to_fp16, epsilon = var_45_to_fp16, gamma = instruments_0_up2_3_weight_to_fp16, mean = instruments_0_down4_act_0_running_mean_to_fp16, variance = instruments_0_down4_act_0_running_var_to_fp16, x = input_59_cast_fp16)[name = tensor<string, []>("input_61_cast_fp16")];
            tensor<bool, []> input_63_interleave_0 = const()[name = tensor<string, []>("input_63_interleave_0"), val = tensor<bool, []>(false)];
            tensor<fp16, [1, 256, 32, 64]> input_63_cast_fp16 = concat(axis = var_51, interleave = input_63_interleave_0, values = (input_29_cast_fp16, input_61_cast_fp16))[name = tensor<string, []>("input_63_cast_fp16")];
            tensor<string, []> x_5_pad_type_0 = const()[name = tensor<string, []>("x_5_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> x_5_strides_0 = const()[name = tensor<string, []>("x_5_strides_0"), val = tensor<int32, [2]>([2, 2])];
            tensor<int32, [4]> x_5_pad_0 = const()[name = tensor<string, []>("x_5_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> x_5_dilations_0 = const()[name = tensor<string, []>("x_5_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> x_5_groups_0 = const()[name = tensor<string, []>("x_5_groups_0"), val = tensor<int32, []>(1)];
            tensor<int32, [4]> x_5_has_output_shape_output_shape_0 = const()[name = tensor<string, []>("x_5_has_output_shape_output_shape_0"), val = tensor<int32, [4]>([1, 64, 67, 131])];
            tensor<fp16, [256, 64, 5, 5]> instruments_0_up3_0_weight_to_fp16 = const()[name = tensor<string, []>("instruments_0_up3_0_weight_to_fp16"), val = tensor<fp16, [256, 64, 5, 5]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(18572672)))];
            tensor<fp16, [64]> instruments_0_up3_0_bias_to_fp16 = const()[name = tensor<string, []>("instruments_0_up3_0_bias_to_fp16"), val = tensor<fp16, [64]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(19391936)))];
            tensor<fp16, [1, 64, 67, 131]> x_5_has_output_shape_cast_fp16 = conv_transpose(bias = instruments_0_up3_0_bias_to_fp16, dilations = x_5_dilations_0, groups = x_5_groups_0, output_shape = x_5_has_output_shape_output_shape_0, pad = x_5_pad_0, pad_type = x_5_pad_type_0, strides = x_5_strides_0, weight = instruments_0_up3_0_weight_to_fp16, x = input_63_cast_fp16)[name = tensor<string, []>("x_5_has_output_shape_cast_fp16")];
            tensor<int32, [4]> var_223_begin_0 = const()[name = tensor<string, []>("op_223_begin_0"), val = tensor<int32, [4]>([0, 0, 1, 0])];
            tensor<int32, [4]> var_223_end_0 = const()[name = tensor<string, []>("op_223_end_0"), val = tensor<int32, [4]>([1, 64, 65, 131])];
            tensor<bool, [4]> var_223_end_mask_0 = const()[name = tensor<string, []>("op_223_end_mask_0"), val = tensor<bool, [4]>([true, true, false, true])];
            tensor<fp16, [1, 64, 64, 131]> var_223_cast_fp16 = slice_by_index(begin = var_223_begin_0, end = var_223_end_0, end_mask = var_223_end_mask_0, x = x_5_has_output_shape_cast_fp16)[name = tensor<string, []>("op_223_cast_fp16")];
            tensor<int32, [4]> input_65_begin_0 = const()[name = tensor<string, []>("input_65_begin_0"), val = tensor<int32, [4]>([0, 0, 0, 1])];
            tensor<int32, [4]> input_65_end_0 = const()[name = tensor<string, []>("input_65_end_0"), val = tensor<int32, [4]>([1, 64, 64, 129])];
            tensor<bool, [4]> input_65_end_mask_0 = const()[name = tensor<string, []>("input_65_end_mask_0"), val = tensor<bool, [4]>([true, true, true, false])];
            tensor<fp16, [1, 64, 64, 128]> input_65_cast_fp16 = slice_by_index(begin = input_65_begin_0, end = input_65_end_0, end_mask = input_65_end_mask_0, x = var_223_cast_fp16)[name = tensor<string, []>("input_65_cast_fp16")];
            tensor<fp16, [1, 64, 64, 128]> input_67_cast_fp16 = relu(x = input_65_cast_fp16)[name = tensor<string, []>("input_67_cast_fp16")];
            tensor<fp16, [64]> instruments_0_up3_3_running_mean_to_fp16 = const()[name = tensor<string, []>("instruments_0_up3_3_running_mean_to_fp16"), val = tensor<fp16, [64]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(19392128)))];
            tensor<fp16, [64]> instruments_0_up3_3_running_var_to_fp16 = const()[name = tensor<string, []>("instruments_0_up3_3_running_var_to_fp16"), val = tensor<fp16, [64]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(19392320)))];
            tensor<fp16, [64]> instruments_0_up3_3_weight_to_fp16 = const()[name = tensor<string, []>("instruments_0_up3_3_weight_to_fp16"), val = tensor<fp16, [64]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(19392512)))];
            tensor<fp16, [64]> instruments_0_up3_3_bias_to_fp16 = const()[name = tensor<string, []>("instruments_0_up3_3_bias_to_fp16"), val = tensor<fp16, [64]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(19392704)))];
            tensor<fp16, [1, 64, 64, 128]> input_69_cast_fp16 = batch_norm(beta = instruments_0_up3_3_bias_to_fp16, epsilon = var_45_to_fp16, gamma = instruments_0_up3_3_weight_to_fp16, mean = instruments_0_up3_3_running_mean_to_fp16, variance = instruments_0_up3_3_running_var_to_fp16, x = input_67_cast_fp16)[name = tensor<string, []>("input_69_cast_fp16")];
            tensor<bool, []> input_71_interleave_0 = const()[name = tensor<string, []>("input_71_interleave_0"), val = tensor<bool, []>(false)];
            tensor<fp16, [1, 128, 64, 128]> input_71_cast_fp16 = concat(axis = var_51, interleave = input_71_interleave_0, values = (input_21_cast_fp16, input_69_cast_fp16))[name = tensor<string, []>("input_71_cast_fp16")];
            tensor<string, []> x_7_pad_type_0 = const()[name = tensor<string, []>("x_7_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> x_7_strides_0 = const()[name = tensor<string, []>("x_7_strides_0"), val = tensor<int32, [2]>([2, 2])];
            tensor<int32, [4]> x_7_pad_0 = const()[name = tensor<string, []>("x_7_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> x_7_dilations_0 = const()[name = tensor<string, []>("x_7_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> x_7_groups_0 = const()[name = tensor<string, []>("x_7_groups_0"), val = tensor<int32, []>(1)];
            tensor<int32, [4]> x_7_has_output_shape_output_shape_0 = const()[name = tensor<string, []>("x_7_has_output_shape_output_shape_0"), val = tensor<int32, [4]>([1, 32, 131, 259])];
            tensor<fp16, [128, 32, 5, 5]> instruments_0_up4_0_weight_to_fp16 = const()[name = tensor<string, []>("instruments_0_up4_0_weight_to_fp16"), val = tensor<fp16, [128, 32, 5, 5]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(19392896)))];
            tensor<fp16, [32]> instruments_0_up4_0_bias_to_fp16 = const()[name = tensor<string, []>("instruments_0_up4_0_bias_to_fp16"), val = tensor<fp16, [32]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(19597760)))];
            tensor<fp16, [1, 32, 131, 259]> x_7_has_output_shape_cast_fp16 = conv_transpose(bias = instruments_0_up4_0_bias_to_fp16, dilations = x_7_dilations_0, groups = x_7_groups_0, output_shape = x_7_has_output_shape_output_shape_0, pad = x_7_pad_0, pad_type = x_7_pad_type_0, strides = x_7_strides_0, weight = instruments_0_up4_0_weight_to_fp16, x = input_71_cast_fp16)[name = tensor<string, []>("x_7_has_output_shape_cast_fp16")];
            tensor<int32, [4]> var_245_begin_0 = const()[name = tensor<string, []>("op_245_begin_0"), val = tensor<int32, [4]>([0, 0, 1, 0])];
            tensor<int32, [4]> var_245_end_0 = const()[name = tensor<string, []>("op_245_end_0"), val = tensor<int32, [4]>([1, 32, 129, 259])];
            tensor<bool, [4]> var_245_end_mask_0 = const()[name = tensor<string, []>("op_245_end_mask_0"), val = tensor<bool, [4]>([true, true, false, true])];
            tensor<fp16, [1, 32, 128, 259]> var_245_cast_fp16 = slice_by_index(begin = var_245_begin_0, end = var_245_end_0, end_mask = var_245_end_mask_0, x = x_7_has_output_shape_cast_fp16)[name = tensor<string, []>("op_245_cast_fp16")];
            tensor<int32, [4]> input_73_begin_0 = const()[name = tensor<string, []>("input_73_begin_0"), val = tensor<int32, [4]>([0, 0, 0, 1])];
            tensor<int32, [4]> input_73_end_0 = const()[name = tensor<string, []>("input_73_end_0"), val = tensor<int32, [4]>([1, 32, 128, 257])];
            tensor<bool, [4]> input_73_end_mask_0 = const()[name = tensor<string, []>("input_73_end_mask_0"), val = tensor<bool, [4]>([true, true, true, false])];
            tensor<fp16, [1, 32, 128, 256]> input_73_cast_fp16 = slice_by_index(begin = input_73_begin_0, end = input_73_end_0, end_mask = input_73_end_mask_0, x = var_245_cast_fp16)[name = tensor<string, []>("input_73_cast_fp16")];
            tensor<fp16, [1, 32, 128, 256]> input_75_cast_fp16 = relu(x = input_73_cast_fp16)[name = tensor<string, []>("input_75_cast_fp16")];
            tensor<fp16, [32]> instruments_0_up4_3_running_mean_to_fp16 = const()[name = tensor<string, []>("instruments_0_up4_3_running_mean_to_fp16"), val = tensor<fp16, [32]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(19597888)))];
            tensor<fp16, [32]> instruments_0_up4_3_running_var_to_fp16 = const()[name = tensor<string, []>("instruments_0_up4_3_running_var_to_fp16"), val = tensor<fp16, [32]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(19598016)))];
            tensor<fp16, [32]> instruments_0_up4_3_weight_to_fp16 = const()[name = tensor<string, []>("instruments_0_up4_3_weight_to_fp16"), val = tensor<fp16, [32]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(19598144)))];
            tensor<fp16, [32]> instruments_0_up4_3_bias_to_fp16 = const()[name = tensor<string, []>("instruments_0_up4_3_bias_to_fp16"), val = tensor<fp16, [32]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(19598272)))];
            tensor<fp16, [1, 32, 128, 256]> u4_1_cast_fp16 = batch_norm(beta = instruments_0_up4_3_bias_to_fp16, epsilon = var_45_to_fp16, gamma = instruments_0_up4_3_weight_to_fp16, mean = instruments_0_up4_3_running_mean_to_fp16, variance = instruments_0_up4_3_running_var_to_fp16, x = input_75_cast_fp16)[name = tensor<string, []>("u4_1_cast_fp16")];
            tensor<bool, []> input_77_interleave_0 = const()[name = tensor<string, []>("input_77_interleave_0"), val = tensor<bool, []>(false)];
            tensor<fp16, [1, 64, 128, 256]> input_77_cast_fp16 = concat(axis = var_51, interleave = input_77_interleave_0, values = (input_13_cast_fp16, u4_1_cast_fp16))[name = tensor<string, []>("input_77_cast_fp16")];
            tensor<string, []> x_9_pad_type_0 = const()[name = tensor<string, []>("x_9_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> x_9_strides_0 = const()[name = tensor<string, []>("x_9_strides_0"), val = tensor<int32, [2]>([2, 2])];
            tensor<int32, [4]> x_9_pad_0 = const()[name = tensor<string, []>("x_9_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> x_9_dilations_0 = const()[name = tensor<string, []>("x_9_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> x_9_groups_0 = const()[name = tensor<string, []>("x_9_groups_0"), val = tensor<int32, []>(1)];
            tensor<int32, [4]> x_9_has_output_shape_output_shape_0 = const()[name = tensor<string, []>("x_9_has_output_shape_output_shape_0"), val = tensor<int32, [4]>([1, 16, 259, 515])];
            tensor<fp16, [64, 16, 5, 5]> instruments_0_up5_0_weight_to_fp16 = const()[name = tensor<string, []>("instruments_0_up5_0_weight_to_fp16"), val = tensor<fp16, [64, 16, 5, 5]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(19598400)))];
            tensor<fp16, [16]> instruments_0_up5_0_bias_to_fp16 = const()[name = tensor<string, []>("instruments_0_up5_0_bias_to_fp16"), val = tensor<fp16, [16]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(19649664)))];
            tensor<fp16, [1, 16, 259, 515]> x_9_has_output_shape_cast_fp16 = conv_transpose(bias = instruments_0_up5_0_bias_to_fp16, dilations = x_9_dilations_0, groups = x_9_groups_0, output_shape = x_9_has_output_shape_output_shape_0, pad = x_9_pad_0, pad_type = x_9_pad_type_0, strides = x_9_strides_0, weight = instruments_0_up5_0_weight_to_fp16, x = input_77_cast_fp16)[name = tensor<string, []>("x_9_has_output_shape_cast_fp16")];
            tensor<int32, [4]> var_266_begin_0 = const()[name = tensor<string, []>("op_266_begin_0"), val = tensor<int32, [4]>([0, 0, 1, 0])];
            tensor<int32, [4]> var_266_end_0 = const()[name = tensor<string, []>("op_266_end_0"), val = tensor<int32, [4]>([1, 16, 257, 515])];
            tensor<bool, [4]> var_266_end_mask_0 = const()[name = tensor<string, []>("op_266_end_mask_0"), val = tensor<bool, [4]>([true, true, false, true])];
            tensor<fp16, [1, 16, 256, 515]> var_266_cast_fp16 = slice_by_index(begin = var_266_begin_0, end = var_266_end_0, end_mask = var_266_end_mask_0, x = x_9_has_output_shape_cast_fp16)[name = tensor<string, []>("op_266_cast_fp16")];
            tensor<int32, [4]> input_79_begin_0 = const()[name = tensor<string, []>("input_79_begin_0"), val = tensor<int32, [4]>([0, 0, 0, 1])];
            tensor<int32, [4]> input_79_end_0 = const()[name = tensor<string, []>("input_79_end_0"), val = tensor<int32, [4]>([1, 16, 256, 513])];
            tensor<bool, [4]> input_79_end_mask_0 = const()[name = tensor<string, []>("input_79_end_mask_0"), val = tensor<bool, [4]>([true, true, true, false])];
            tensor<fp16, [1, 16, 256, 512]> input_79_cast_fp16 = slice_by_index(begin = input_79_begin_0, end = input_79_end_0, end_mask = input_79_end_mask_0, x = var_266_cast_fp16)[name = tensor<string, []>("input_79_cast_fp16")];
            tensor<fp16, [1, 16, 256, 512]> input_81_cast_fp16 = relu(x = input_79_cast_fp16)[name = tensor<string, []>("input_81_cast_fp16")];
            tensor<fp16, [16]> instruments_0_up5_3_running_mean_to_fp16 = const()[name = tensor<string, []>("instruments_0_up5_3_running_mean_to_fp16"), val = tensor<fp16, [16]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(19649792)))];
            tensor<fp16, [16]> instruments_0_up5_3_running_var_to_fp16 = const()[name = tensor<string, []>("instruments_0_up5_3_running_var_to_fp16"), val = tensor<fp16, [16]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(19649920)))];
            tensor<fp16, [16]> instruments_0_up5_3_weight_to_fp16 = const()[name = tensor<string, []>("instruments_0_up5_3_weight_to_fp16"), val = tensor<fp16, [16]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(19650048)))];
            tensor<fp16, [16]> instruments_0_up5_3_bias_to_fp16 = const()[name = tensor<string, []>("instruments_0_up5_3_bias_to_fp16"), val = tensor<fp16, [16]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(19650176)))];
            tensor<fp16, [1, 16, 256, 512]> u5_1_cast_fp16 = batch_norm(beta = instruments_0_up5_3_bias_to_fp16, epsilon = var_45_to_fp16, gamma = instruments_0_up5_3_weight_to_fp16, mean = instruments_0_up5_3_running_mean_to_fp16, variance = instruments_0_up5_3_running_var_to_fp16, x = input_81_cast_fp16)[name = tensor<string, []>("u5_1_cast_fp16")];
            tensor<bool, []> input_83_interleave_0 = const()[name = tensor<string, []>("input_83_interleave_0"), val = tensor<bool, []>(false)];
            tensor<fp16, [1, 32, 256, 512]> input_83_cast_fp16 = concat(axis = var_51, interleave = input_83_interleave_0, values = (input_5_cast_fp16, u5_1_cast_fp16))[name = tensor<string, []>("input_83_cast_fp16")];
            tensor<string, []> x_11_pad_type_0 = const()[name = tensor<string, []>("x_11_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> x_11_strides_0 = const()[name = tensor<string, []>("x_11_strides_0"), val = tensor<int32, [2]>([2, 2])];
            tensor<int32, [4]> x_11_pad_0 = const()[name = tensor<string, []>("x_11_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> x_11_dilations_0 = const()[name = tensor<string, []>("x_11_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> x_11_groups_0 = const()[name = tensor<string, []>("x_11_groups_0"), val = tensor<int32, []>(1)];
            tensor<int32, [4]> x_11_has_output_shape_output_shape_0 = const()[name = tensor<string, []>("x_11_has_output_shape_output_shape_0"), val = tensor<int32, [4]>([1, 1, 515, 1027])];
            tensor<fp16, [32, 1, 5, 5]> instruments_0_up6_0_weight_to_fp16 = const()[name = tensor<string, []>("instruments_0_up6_0_weight_to_fp16"), val = tensor<fp16, [32, 1, 5, 5]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(19650304)))];
            tensor<fp16, [1]> instruments_0_up6_0_bias_to_fp16 = const()[name = tensor<string, []>("instruments_0_up6_0_bias_to_fp16"), val = tensor<fp16, [1]>([0x1.1f8p+0])];
            tensor<fp16, [1, 1, 515, 1027]> x_11_has_output_shape_cast_fp16 = conv_transpose(bias = instruments_0_up6_0_bias_to_fp16, dilations = x_11_dilations_0, groups = x_11_groups_0, output_shape = x_11_has_output_shape_output_shape_0, pad = x_11_pad_0, pad_type = x_11_pad_type_0, strides = x_11_strides_0, weight = instruments_0_up6_0_weight_to_fp16, x = input_83_cast_fp16)[name = tensor<string, []>("x_11_has_output_shape_cast_fp16")];
            tensor<int32, [4]> var_287_begin_0 = const()[name = tensor<string, []>("op_287_begin_0"), val = tensor<int32, [4]>([0, 0, 1, 0])];
            tensor<int32, [4]> var_287_end_0 = const()[name = tensor<string, []>("op_287_end_0"), val = tensor<int32, [4]>([1, 1, 513, 1027])];
            tensor<bool, [4]> var_287_end_mask_0 = const()[name = tensor<string, []>("op_287_end_mask_0"), val = tensor<bool, [4]>([true, true, false, true])];
            tensor<fp16, [1, 1, 512, 1027]> var_287_cast_fp16 = slice_by_index(begin = var_287_begin_0, end = var_287_end_0, end_mask = var_287_end_mask_0, x = x_11_has_output_shape_cast_fp16)[name = tensor<string, []>("op_287_cast_fp16")];
            tensor<int32, [4]> input_85_begin_0 = const()[name = tensor<string, []>("input_85_begin_0"), val = tensor<int32, [4]>([0, 0, 0, 1])];
            tensor<int32, [4]> input_85_end_0 = const()[name = tensor<string, []>("input_85_end_0"), val = tensor<int32, [4]>([1, 1, 512, 1025])];
            tensor<bool, [4]> input_85_end_mask_0 = const()[name = tensor<string, []>("input_85_end_mask_0"), val = tensor<bool, [4]>([true, true, true, false])];
            tensor<fp16, [1, 1, 512, 1024]> input_85_cast_fp16 = slice_by_index(begin = input_85_begin_0, end = input_85_end_0, end_mask = input_85_end_mask_0, x = var_287_cast_fp16)[name = tensor<string, []>("input_85_cast_fp16")];
            tensor<fp16, [1, 1, 512, 1024]> input_87_cast_fp16 = relu(x = input_85_cast_fp16)[name = tensor<string, []>("input_87_cast_fp16")];
            tensor<fp16, [1]> instruments_0_up6_3_running_mean_to_fp16 = const()[name = tensor<string, []>("instruments_0_up6_3_running_mean_to_fp16"), val = tensor<fp16, [1]>([0x0p+0])];
            tensor<fp16, [1]> instruments_0_up6_3_running_var_to_fp16 = const()[name = tensor<string, []>("instruments_0_up6_3_running_var_to_fp16"), val = tensor<fp16, [1]>([0x1p+0])];
            tensor<fp16, [1]> instruments_0_up6_3_weight_to_fp16 = const()[name = tensor<string, []>("instruments_0_up6_3_weight_to_fp16"), val = tensor<fp16, [1]>([0x1.bbp-6])];
            tensor<fp16, [1]> instruments_0_up6_3_bias_to_fp16 = const()[name = tensor<string, []>("instruments_0_up6_3_bias_to_fp16"), val = tensor<fp16, [1]>([-0x1.d8cp-1])];
            tensor<fp16, [1, 1, 512, 1024]> input_89_cast_fp16 = batch_norm(beta = instruments_0_up6_3_bias_to_fp16, epsilon = var_45_to_fp16, gamma = instruments_0_up6_3_weight_to_fp16, mean = instruments_0_up6_3_running_mean_to_fp16, variance = instruments_0_up6_3_running_var_to_fp16, x = input_87_cast_fp16)[name = tensor<string, []>("input_89_cast_fp16")];
            tensor<string, []> input_91_pad_type_0 = const()[name = tensor<string, []>("input_91_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_91_pad_0 = const()[name = tensor<string, []>("input_91_pad_0"), val = tensor<int32, [4]>([3, 3, 3, 3])];
            tensor<int32, [2]> input_91_dilations_0 = const()[name = tensor<string, []>("input_91_dilations_0"), val = tensor<int32, [2]>([2, 2])];
            tensor<int32, [2]> input_91_strides_0 = const()[name = tensor<string, []>("input_91_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_91_groups_0 = const()[name = tensor<string, []>("input_91_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [2, 1, 4, 4]> instruments_0_up7_0_weight_to_fp16 = const()[name = tensor<string, []>("instruments_0_up7_0_weight_to_fp16"), val = tensor<fp16, [2, 1, 4, 4]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(19651968)))];
            tensor<fp16, [2]> instruments_0_up7_0_bias_to_fp16 = const()[name = tensor<string, []>("instruments_0_up7_0_bias_to_fp16"), val = tensor<fp16, [2]>([0x1.278p-1, 0x1.29cp-1])];
            tensor<fp16, [1, 2, 512, 1024]> input_91_cast_fp16 = conv(bias = instruments_0_up7_0_bias_to_fp16, dilations = input_91_dilations_0, groups = input_91_groups_0, pad = input_91_pad_0, pad_type = input_91_pad_type_0, strides = input_91_strides_0, weight = instruments_0_up7_0_weight_to_fp16, x = input_89_cast_fp16)[name = tensor<string, []>("input_91_cast_fp16")];
            tensor<fp16, [1, 2, 512, 1024]> u7_1_cast_fp16 = sigmoid(x = input_91_cast_fp16)[name = tensor<string, []>("u7_1_cast_fp16")];
            tensor<fp16, [1, 2, 512, 1024]> var_304_cast_fp16 = mul(x = u7_1_cast_fp16, y = input_1_cast_fp16)[name = tensor<string, []>("op_304_cast_fp16")];
            tensor<int32, []> var_315 = const()[name = tensor<string, []>("op_315"), val = tensor<int32, []>(1)];
            tensor<string, []> input_95_pad_type_0 = const()[name = tensor<string, []>("input_95_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_95_strides_0 = const()[name = tensor<string, []>("input_95_strides_0"), val = tensor<int32, [2]>([2, 2])];
            tensor<int32, [4]> input_95_pad_0 = const()[name = tensor<string, []>("input_95_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_95_dilations_0 = const()[name = tensor<string, []>("input_95_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_95_groups_0 = const()[name = tensor<string, []>("input_95_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [16, 2, 5, 5]> instruments_1_down1_conv_1_weight_to_fp16 = const()[name = tensor<string, []>("instruments_1_down1_conv_1_weight_to_fp16"), val = tensor<fp16, [16, 2, 5, 5]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(19652096)))];
            tensor<fp16, [16]> instruments_1_down1_conv_1_bias_to_fp16 = const()[name = tensor<string, []>("instruments_1_down1_conv_1_bias_to_fp16"), val = tensor<fp16, [16]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(19653760)))];
            tensor<fp16, [1, 16, 256, 512]> input_95_cast_fp16 = conv(bias = instruments_1_down1_conv_1_bias_to_fp16, dilations = input_95_dilations_0, groups = input_95_groups_0, pad = input_95_pad_0, pad_type = input_95_pad_type_0, strides = input_95_strides_0, weight = instruments_1_down1_conv_1_weight_to_fp16, x = input_3_cast_fp16)[name = tensor<string, []>("input_95_cast_fp16")];
            tensor<fp16, [16]> instruments_1_down1_act_0_running_mean_to_fp16 = const()[name = tensor<string, []>("instruments_1_down1_act_0_running_mean_to_fp16"), val = tensor<fp16, [16]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(19653888)))];
            tensor<fp16, [16]> instruments_1_down1_act_0_running_var_to_fp16 = const()[name = tensor<string, []>("instruments_1_down1_act_0_running_var_to_fp16"), val = tensor<fp16, [16]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(19654016)))];
            tensor<fp16, [16]> instruments_1_down1_act_0_weight_to_fp16 = const()[name = tensor<string, []>("instruments_1_down1_act_0_weight_to_fp16"), val = tensor<fp16, [16]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(19654144)))];
            tensor<fp16, [16]> instruments_1_down1_act_0_bias_to_fp16 = const()[name = tensor<string, []>("instruments_1_down1_act_0_bias_to_fp16"), val = tensor<fp16, [16]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(19654272)))];
            tensor<fp16, []> var_309_to_fp16 = const()[name = tensor<string, []>("op_309_to_fp16"), val = tensor<fp16, []>(0x1.064p-10)];
            tensor<fp16, [1, 16, 256, 512]> input_97_cast_fp16 = batch_norm(beta = instruments_1_down1_act_0_bias_to_fp16, epsilon = var_309_to_fp16, gamma = instruments_1_down1_act_0_weight_to_fp16, mean = instruments_1_down1_act_0_running_mean_to_fp16, variance = instruments_1_down1_act_0_running_var_to_fp16, x = input_95_cast_fp16)[name = tensor<string, []>("input_97_cast_fp16")];
            tensor<fp16, []> var_311_to_fp16 = const()[name = tensor<string, []>("op_311_to_fp16"), val = tensor<fp16, []>(0x1.998p-3)];
            tensor<fp16, [1, 16, 256, 512]> input_99_cast_fp16 = leaky_relu(alpha = var_311_to_fp16, x = input_97_cast_fp16)[name = tensor<string, []>("input_99_cast_fp16")];
            tensor<int32, [8]> input_101_pad_0 = const()[name = tensor<string, []>("input_101_pad_0"), val = tensor<int32, [8]>([0, 0, 0, 0, 1, 2, 1, 2])];
            tensor<string, []> input_101_mode_0 = const()[name = tensor<string, []>("input_101_mode_0"), val = tensor<string, []>("constant")];
            tensor<fp16, []> const_12_to_fp16 = const()[name = tensor<string, []>("const_12_to_fp16"), val = tensor<fp16, []>(0x0p+0)];
            tensor<fp16, [1, 16, 259, 515]> input_101_cast_fp16 = pad(constant_val = const_12_to_fp16, mode = input_101_mode_0, pad = input_101_pad_0, x = input_99_cast_fp16)[name = tensor<string, []>("input_101_cast_fp16")];
            tensor<string, []> input_103_pad_type_0 = const()[name = tensor<string, []>("input_103_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_103_strides_0 = const()[name = tensor<string, []>("input_103_strides_0"), val = tensor<int32, [2]>([2, 2])];
            tensor<int32, [4]> input_103_pad_0 = const()[name = tensor<string, []>("input_103_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_103_dilations_0 = const()[name = tensor<string, []>("input_103_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_103_groups_0 = const()[name = tensor<string, []>("input_103_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [32, 16, 5, 5]> instruments_1_down2_conv_1_weight_to_fp16 = const()[name = tensor<string, []>("instruments_1_down2_conv_1_weight_to_fp16"), val = tensor<fp16, [32, 16, 5, 5]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(19654400)))];
            tensor<fp16, [32]> instruments_1_down2_conv_1_bias_to_fp16 = const()[name = tensor<string, []>("instruments_1_down2_conv_1_bias_to_fp16"), val = tensor<fp16, [32]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(19680064)))];
            tensor<fp16, [1, 32, 128, 256]> input_103_cast_fp16 = conv(bias = instruments_1_down2_conv_1_bias_to_fp16, dilations = input_103_dilations_0, groups = input_103_groups_0, pad = input_103_pad_0, pad_type = input_103_pad_type_0, strides = input_103_strides_0, weight = instruments_1_down2_conv_1_weight_to_fp16, x = input_101_cast_fp16)[name = tensor<string, []>("input_103_cast_fp16")];
            tensor<fp16, [32]> instruments_1_down2_act_0_running_mean_to_fp16 = const()[name = tensor<string, []>("instruments_1_down2_act_0_running_mean_to_fp16"), val = tensor<fp16, [32]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(19680192)))];
            tensor<fp16, [32]> instruments_1_down2_act_0_running_var_to_fp16 = const()[name = tensor<string, []>("instruments_1_down2_act_0_running_var_to_fp16"), val = tensor<fp16, [32]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(19680320)))];
            tensor<fp16, [32]> instruments_1_down2_act_0_weight_to_fp16 = const()[name = tensor<string, []>("instruments_1_down2_act_0_weight_to_fp16"), val = tensor<fp16, [32]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(19680448)))];
            tensor<fp16, [32]> instruments_1_down2_act_0_bias_to_fp16 = const()[name = tensor<string, []>("instruments_1_down2_act_0_bias_to_fp16"), val = tensor<fp16, [32]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(19680576)))];
            tensor<fp16, [1, 32, 128, 256]> input_105_cast_fp16 = batch_norm(beta = instruments_1_down2_act_0_bias_to_fp16, epsilon = var_309_to_fp16, gamma = instruments_1_down2_act_0_weight_to_fp16, mean = instruments_1_down2_act_0_running_mean_to_fp16, variance = instruments_1_down2_act_0_running_var_to_fp16, x = input_103_cast_fp16)[name = tensor<string, []>("input_105_cast_fp16")];
            tensor<fp16, [1, 32, 128, 256]> input_107_cast_fp16 = leaky_relu(alpha = var_311_to_fp16, x = input_105_cast_fp16)[name = tensor<string, []>("input_107_cast_fp16")];
            tensor<int32, [8]> input_109_pad_0 = const()[name = tensor<string, []>("input_109_pad_0"), val = tensor<int32, [8]>([0, 0, 0, 0, 1, 2, 1, 2])];
            tensor<string, []> input_109_mode_0 = const()[name = tensor<string, []>("input_109_mode_0"), val = tensor<string, []>("constant")];
            tensor<fp16, []> const_13_to_fp16 = const()[name = tensor<string, []>("const_13_to_fp16"), val = tensor<fp16, []>(0x0p+0)];
            tensor<fp16, [1, 32, 131, 259]> input_109_cast_fp16 = pad(constant_val = const_13_to_fp16, mode = input_109_mode_0, pad = input_109_pad_0, x = input_107_cast_fp16)[name = tensor<string, []>("input_109_cast_fp16")];
            tensor<string, []> input_111_pad_type_0 = const()[name = tensor<string, []>("input_111_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_111_strides_0 = const()[name = tensor<string, []>("input_111_strides_0"), val = tensor<int32, [2]>([2, 2])];
            tensor<int32, [4]> input_111_pad_0 = const()[name = tensor<string, []>("input_111_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_111_dilations_0 = const()[name = tensor<string, []>("input_111_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_111_groups_0 = const()[name = tensor<string, []>("input_111_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [64, 32, 5, 5]> instruments_1_down3_conv_1_weight_to_fp16 = const()[name = tensor<string, []>("instruments_1_down3_conv_1_weight_to_fp16"), val = tensor<fp16, [64, 32, 5, 5]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(19680704)))];
            tensor<fp16, [64]> instruments_1_down3_conv_1_bias_to_fp16 = const()[name = tensor<string, []>("instruments_1_down3_conv_1_bias_to_fp16"), val = tensor<fp16, [64]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(19783168)))];
            tensor<fp16, [1, 64, 64, 128]> input_111_cast_fp16 = conv(bias = instruments_1_down3_conv_1_bias_to_fp16, dilations = input_111_dilations_0, groups = input_111_groups_0, pad = input_111_pad_0, pad_type = input_111_pad_type_0, strides = input_111_strides_0, weight = instruments_1_down3_conv_1_weight_to_fp16, x = input_109_cast_fp16)[name = tensor<string, []>("input_111_cast_fp16")];
            tensor<fp16, [64]> instruments_1_down3_act_0_running_mean_to_fp16 = const()[name = tensor<string, []>("instruments_1_down3_act_0_running_mean_to_fp16"), val = tensor<fp16, [64]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(19783360)))];
            tensor<fp16, [64]> instruments_1_down3_act_0_running_var_to_fp16 = const()[name = tensor<string, []>("instruments_1_down3_act_0_running_var_to_fp16"), val = tensor<fp16, [64]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(19783552)))];
            tensor<fp16, [64]> instruments_1_down3_act_0_weight_to_fp16 = const()[name = tensor<string, []>("instruments_1_down3_act_0_weight_to_fp16"), val = tensor<fp16, [64]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(19783744)))];
            tensor<fp16, [64]> instruments_1_down3_act_0_bias_to_fp16 = const()[name = tensor<string, []>("instruments_1_down3_act_0_bias_to_fp16"), val = tensor<fp16, [64]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(19783936)))];
            tensor<fp16, [1, 64, 64, 128]> input_113_cast_fp16 = batch_norm(beta = instruments_1_down3_act_0_bias_to_fp16, epsilon = var_309_to_fp16, gamma = instruments_1_down3_act_0_weight_to_fp16, mean = instruments_1_down3_act_0_running_mean_to_fp16, variance = instruments_1_down3_act_0_running_var_to_fp16, x = input_111_cast_fp16)[name = tensor<string, []>("input_113_cast_fp16")];
            tensor<fp16, [1, 64, 64, 128]> input_115_cast_fp16 = leaky_relu(alpha = var_311_to_fp16, x = input_113_cast_fp16)[name = tensor<string, []>("input_115_cast_fp16")];
            tensor<int32, [8]> input_117_pad_0 = const()[name = tensor<string, []>("input_117_pad_0"), val = tensor<int32, [8]>([0, 0, 0, 0, 1, 2, 1, 2])];
            tensor<string, []> input_117_mode_0 = const()[name = tensor<string, []>("input_117_mode_0"), val = tensor<string, []>("constant")];
            tensor<fp16, []> const_14_to_fp16 = const()[name = tensor<string, []>("const_14_to_fp16"), val = tensor<fp16, []>(0x0p+0)];
            tensor<fp16, [1, 64, 67, 131]> input_117_cast_fp16 = pad(constant_val = const_14_to_fp16, mode = input_117_mode_0, pad = input_117_pad_0, x = input_115_cast_fp16)[name = tensor<string, []>("input_117_cast_fp16")];
            tensor<string, []> input_119_pad_type_0 = const()[name = tensor<string, []>("input_119_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_119_strides_0 = const()[name = tensor<string, []>("input_119_strides_0"), val = tensor<int32, [2]>([2, 2])];
            tensor<int32, [4]> input_119_pad_0 = const()[name = tensor<string, []>("input_119_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_119_dilations_0 = const()[name = tensor<string, []>("input_119_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_119_groups_0 = const()[name = tensor<string, []>("input_119_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [128, 64, 5, 5]> instruments_1_down4_conv_1_weight_to_fp16 = const()[name = tensor<string, []>("instruments_1_down4_conv_1_weight_to_fp16"), val = tensor<fp16, [128, 64, 5, 5]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(19784128)))];
            tensor<fp16, [128]> instruments_1_down4_conv_1_bias_to_fp16 = const()[name = tensor<string, []>("instruments_1_down4_conv_1_bias_to_fp16"), val = tensor<fp16, [128]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(20193792)))];
            tensor<fp16, [1, 128, 32, 64]> input_119_cast_fp16 = conv(bias = instruments_1_down4_conv_1_bias_to_fp16, dilations = input_119_dilations_0, groups = input_119_groups_0, pad = input_119_pad_0, pad_type = input_119_pad_type_0, strides = input_119_strides_0, weight = instruments_1_down4_conv_1_weight_to_fp16, x = input_117_cast_fp16)[name = tensor<string, []>("input_119_cast_fp16")];
            tensor<fp16, [128]> instruments_1_down4_act_0_weight_to_fp16 = const()[name = tensor<string, []>("instruments_1_down4_act_0_weight_to_fp16"), val = tensor<fp16, [128]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(20194112)))];
            tensor<fp16, [128]> instruments_1_down4_act_0_bias_to_fp16 = const()[name = tensor<string, []>("instruments_1_down4_act_0_bias_to_fp16"), val = tensor<fp16, [128]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(20194432)))];
            tensor<fp16, [1, 128, 32, 64]> input_121_cast_fp16 = batch_norm(beta = instruments_1_down4_act_0_bias_to_fp16, epsilon = var_309_to_fp16, gamma = instruments_1_down4_act_0_weight_to_fp16, mean = instruments_0_down4_act_0_running_mean_to_fp16, variance = instruments_0_down4_act_0_running_var_to_fp16, x = input_119_cast_fp16)[name = tensor<string, []>("input_121_cast_fp16")];
            tensor<fp16, [1, 128, 32, 64]> input_123_cast_fp16 = leaky_relu(alpha = var_311_to_fp16, x = input_121_cast_fp16)[name = tensor<string, []>("input_123_cast_fp16")];
            tensor<int32, [8]> input_125_pad_0 = const()[name = tensor<string, []>("input_125_pad_0"), val = tensor<int32, [8]>([0, 0, 0, 0, 1, 2, 1, 2])];
            tensor<string, []> input_125_mode_0 = const()[name = tensor<string, []>("input_125_mode_0"), val = tensor<string, []>("constant")];
            tensor<fp16, []> const_15_to_fp16 = const()[name = tensor<string, []>("const_15_to_fp16"), val = tensor<fp16, []>(0x0p+0)];
            tensor<fp16, [1, 128, 35, 67]> input_125_cast_fp16 = pad(constant_val = const_15_to_fp16, mode = input_125_mode_0, pad = input_125_pad_0, x = input_123_cast_fp16)[name = tensor<string, []>("input_125_cast_fp16")];
            tensor<string, []> input_127_pad_type_0 = const()[name = tensor<string, []>("input_127_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_127_strides_0 = const()[name = tensor<string, []>("input_127_strides_0"), val = tensor<int32, [2]>([2, 2])];
            tensor<int32, [4]> input_127_pad_0 = const()[name = tensor<string, []>("input_127_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_127_dilations_0 = const()[name = tensor<string, []>("input_127_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_127_groups_0 = const()[name = tensor<string, []>("input_127_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [256, 128, 5, 5]> instruments_1_down5_conv_1_weight_to_fp16 = const()[name = tensor<string, []>("instruments_1_down5_conv_1_weight_to_fp16"), val = tensor<fp16, [256, 128, 5, 5]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(20194752)))];
            tensor<fp16, [256]> instruments_1_down5_conv_1_bias_to_fp16 = const()[name = tensor<string, []>("instruments_1_down5_conv_1_bias_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(21833216)))];
            tensor<fp16, [1, 256, 16, 32]> input_127_cast_fp16 = conv(bias = instruments_1_down5_conv_1_bias_to_fp16, dilations = input_127_dilations_0, groups = input_127_groups_0, pad = input_127_pad_0, pad_type = input_127_pad_type_0, strides = input_127_strides_0, weight = instruments_1_down5_conv_1_weight_to_fp16, x = input_125_cast_fp16)[name = tensor<string, []>("input_127_cast_fp16")];
            tensor<fp16, [256]> instruments_1_down5_act_0_weight_to_fp16 = const()[name = tensor<string, []>("instruments_1_down5_act_0_weight_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(21833792)))];
            tensor<fp16, [256]> instruments_1_down5_act_0_bias_to_fp16 = const()[name = tensor<string, []>("instruments_1_down5_act_0_bias_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(21834368)))];
            tensor<fp16, [1, 256, 16, 32]> input_129_cast_fp16 = batch_norm(beta = instruments_1_down5_act_0_bias_to_fp16, epsilon = var_309_to_fp16, gamma = instruments_1_down5_act_0_weight_to_fp16, mean = instruments_0_down5_act_0_running_mean_to_fp16, variance = instruments_0_down5_act_0_running_var_to_fp16, x = input_127_cast_fp16)[name = tensor<string, []>("input_129_cast_fp16")];
            tensor<fp16, [1, 256, 16, 32]> input_131_cast_fp16 = leaky_relu(alpha = var_311_to_fp16, x = input_129_cast_fp16)[name = tensor<string, []>("input_131_cast_fp16")];
            tensor<int32, [8]> input_133_pad_0 = const()[name = tensor<string, []>("input_133_pad_0"), val = tensor<int32, [8]>([0, 0, 0, 0, 1, 2, 1, 2])];
            tensor<string, []> input_133_mode_0 = const()[name = tensor<string, []>("input_133_mode_0"), val = tensor<string, []>("constant")];
            tensor<fp16, []> const_16_to_fp16 = const()[name = tensor<string, []>("const_16_to_fp16"), val = tensor<fp16, []>(0x0p+0)];
            tensor<fp16, [1, 256, 19, 35]> input_133_cast_fp16 = pad(constant_val = const_16_to_fp16, mode = input_133_mode_0, pad = input_133_pad_0, x = input_131_cast_fp16)[name = tensor<string, []>("input_133_cast_fp16")];
            tensor<string, []> input_135_pad_type_0 = const()[name = tensor<string, []>("input_135_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_135_strides_0 = const()[name = tensor<string, []>("input_135_strides_0"), val = tensor<int32, [2]>([2, 2])];
            tensor<int32, [4]> input_135_pad_0 = const()[name = tensor<string, []>("input_135_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_135_dilations_0 = const()[name = tensor<string, []>("input_135_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_135_groups_0 = const()[name = tensor<string, []>("input_135_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [512, 256, 5, 5]> instruments_1_down6_conv_1_weight_to_fp16 = const()[name = tensor<string, []>("instruments_1_down6_conv_1_weight_to_fp16"), val = tensor<fp16, [512, 256, 5, 5]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(21834944)))];
            tensor<fp16, [512]> instruments_1_down6_conv_1_bias_to_fp16 = const()[name = tensor<string, []>("instruments_1_down6_conv_1_bias_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(28388608)))];
            tensor<fp16, [1, 512, 8, 16]> input_135_cast_fp16 = conv(bias = instruments_1_down6_conv_1_bias_to_fp16, dilations = input_135_dilations_0, groups = input_135_groups_0, pad = input_135_pad_0, pad_type = input_135_pad_type_0, strides = input_135_strides_0, weight = instruments_1_down6_conv_1_weight_to_fp16, x = input_133_cast_fp16)[name = tensor<string, []>("input_135_cast_fp16")];
            tensor<string, []> x_13_pad_type_0 = const()[name = tensor<string, []>("x_13_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> x_13_strides_0 = const()[name = tensor<string, []>("x_13_strides_0"), val = tensor<int32, [2]>([2, 2])];
            tensor<int32, [4]> x_13_pad_0 = const()[name = tensor<string, []>("x_13_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> x_13_dilations_0 = const()[name = tensor<string, []>("x_13_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> x_13_groups_0 = const()[name = tensor<string, []>("x_13_groups_0"), val = tensor<int32, []>(1)];
            tensor<int32, [4]> x_13_has_output_shape_output_shape_0 = const()[name = tensor<string, []>("x_13_has_output_shape_output_shape_0"), val = tensor<int32, [4]>([1, 256, 19, 35])];
            tensor<fp16, [512, 256, 5, 5]> instruments_1_up1_0_weight_to_fp16 = const()[name = tensor<string, []>("instruments_1_up1_0_weight_to_fp16"), val = tensor<fp16, [512, 256, 5, 5]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(28389696)))];
            tensor<fp16, [256]> instruments_1_up1_0_bias_to_fp16 = const()[name = tensor<string, []>("instruments_1_up1_0_bias_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(34943360)))];
            tensor<fp16, [1, 256, 19, 35]> x_13_has_output_shape_cast_fp16 = conv_transpose(bias = instruments_1_up1_0_bias_to_fp16, dilations = x_13_dilations_0, groups = x_13_groups_0, output_shape = x_13_has_output_shape_output_shape_0, pad = x_13_pad_0, pad_type = x_13_pad_type_0, strides = x_13_strides_0, weight = instruments_1_up1_0_weight_to_fp16, x = input_135_cast_fp16)[name = tensor<string, []>("x_13_has_output_shape_cast_fp16")];
            tensor<int32, [4]> var_443_begin_0 = const()[name = tensor<string, []>("op_443_begin_0"), val = tensor<int32, [4]>([0, 0, 1, 0])];
            tensor<int32, [4]> var_443_end_0 = const()[name = tensor<string, []>("op_443_end_0"), val = tensor<int32, [4]>([1, 256, 17, 35])];
            tensor<bool, [4]> var_443_end_mask_0 = const()[name = tensor<string, []>("op_443_end_mask_0"), val = tensor<bool, [4]>([true, true, false, true])];
            tensor<fp16, [1, 256, 16, 35]> var_443_cast_fp16 = slice_by_index(begin = var_443_begin_0, end = var_443_end_0, end_mask = var_443_end_mask_0, x = x_13_has_output_shape_cast_fp16)[name = tensor<string, []>("op_443_cast_fp16")];
            tensor<int32, [4]> input_139_begin_0 = const()[name = tensor<string, []>("input_139_begin_0"), val = tensor<int32, [4]>([0, 0, 0, 1])];
            tensor<int32, [4]> input_139_end_0 = const()[name = tensor<string, []>("input_139_end_0"), val = tensor<int32, [4]>([1, 256, 16, 33])];
            tensor<bool, [4]> input_139_end_mask_0 = const()[name = tensor<string, []>("input_139_end_mask_0"), val = tensor<bool, [4]>([true, true, true, false])];
            tensor<fp16, [1, 256, 16, 32]> input_139_cast_fp16 = slice_by_index(begin = input_139_begin_0, end = input_139_end_0, end_mask = input_139_end_mask_0, x = var_443_cast_fp16)[name = tensor<string, []>("input_139_cast_fp16")];
            tensor<fp16, [1, 256, 16, 32]> input_141_cast_fp16 = relu(x = input_139_cast_fp16)[name = tensor<string, []>("input_141_cast_fp16")];
            tensor<fp16, [256]> instruments_1_up1_3_weight_to_fp16 = const()[name = tensor<string, []>("instruments_1_up1_3_weight_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(34943936)))];
            tensor<fp16, [256]> instruments_1_up1_3_bias_to_fp16 = const()[name = tensor<string, []>("instruments_1_up1_3_bias_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(34944512)))];
            tensor<fp16, [1, 256, 16, 32]> input_143_cast_fp16 = batch_norm(beta = instruments_1_up1_3_bias_to_fp16, epsilon = var_309_to_fp16, gamma = instruments_1_up1_3_weight_to_fp16, mean = instruments_0_down5_act_0_running_mean_to_fp16, variance = instruments_0_down5_act_0_running_var_to_fp16, x = input_141_cast_fp16)[name = tensor<string, []>("input_143_cast_fp16")];
            tensor<bool, []> input_145_interleave_0 = const()[name = tensor<string, []>("input_145_interleave_0"), val = tensor<bool, []>(false)];
            tensor<fp16, [1, 512, 16, 32]> input_145_cast_fp16 = concat(axis = var_315, interleave = input_145_interleave_0, values = (input_127_cast_fp16, input_143_cast_fp16))[name = tensor<string, []>("input_145_cast_fp16")];
            tensor<string, []> x_15_pad_type_0 = const()[name = tensor<string, []>("x_15_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> x_15_strides_0 = const()[name = tensor<string, []>("x_15_strides_0"), val = tensor<int32, [2]>([2, 2])];
            tensor<int32, [4]> x_15_pad_0 = const()[name = tensor<string, []>("x_15_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> x_15_dilations_0 = const()[name = tensor<string, []>("x_15_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> x_15_groups_0 = const()[name = tensor<string, []>("x_15_groups_0"), val = tensor<int32, []>(1)];
            tensor<int32, [4]> x_15_has_output_shape_output_shape_0 = const()[name = tensor<string, []>("x_15_has_output_shape_output_shape_0"), val = tensor<int32, [4]>([1, 128, 35, 67])];
            tensor<fp16, [512, 128, 5, 5]> instruments_1_up2_0_weight_to_fp16 = const()[name = tensor<string, []>("instruments_1_up2_0_weight_to_fp16"), val = tensor<fp16, [512, 128, 5, 5]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(34945088)))];
            tensor<fp16, [128]> instruments_1_up2_0_bias_to_fp16 = const()[name = tensor<string, []>("instruments_1_up2_0_bias_to_fp16"), val = tensor<fp16, [128]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(38221952)))];
            tensor<fp16, [1, 128, 35, 67]> x_15_has_output_shape_cast_fp16 = conv_transpose(bias = instruments_1_up2_0_bias_to_fp16, dilations = x_15_dilations_0, groups = x_15_groups_0, output_shape = x_15_has_output_shape_output_shape_0, pad = x_15_pad_0, pad_type = x_15_pad_type_0, strides = x_15_strides_0, weight = instruments_1_up2_0_weight_to_fp16, x = input_145_cast_fp16)[name = tensor<string, []>("x_15_has_output_shape_cast_fp16")];
            tensor<int32, [4]> var_465_begin_0 = const()[name = tensor<string, []>("op_465_begin_0"), val = tensor<int32, [4]>([0, 0, 1, 0])];
            tensor<int32, [4]> var_465_end_0 = const()[name = tensor<string, []>("op_465_end_0"), val = tensor<int32, [4]>([1, 128, 33, 67])];
            tensor<bool, [4]> var_465_end_mask_0 = const()[name = tensor<string, []>("op_465_end_mask_0"), val = tensor<bool, [4]>([true, true, false, true])];
            tensor<fp16, [1, 128, 32, 67]> var_465_cast_fp16 = slice_by_index(begin = var_465_begin_0, end = var_465_end_0, end_mask = var_465_end_mask_0, x = x_15_has_output_shape_cast_fp16)[name = tensor<string, []>("op_465_cast_fp16")];
            tensor<int32, [4]> input_147_begin_0 = const()[name = tensor<string, []>("input_147_begin_0"), val = tensor<int32, [4]>([0, 0, 0, 1])];
            tensor<int32, [4]> input_147_end_0 = const()[name = tensor<string, []>("input_147_end_0"), val = tensor<int32, [4]>([1, 128, 32, 65])];
            tensor<bool, [4]> input_147_end_mask_0 = const()[name = tensor<string, []>("input_147_end_mask_0"), val = tensor<bool, [4]>([true, true, true, false])];
            tensor<fp16, [1, 128, 32, 64]> input_147_cast_fp16 = slice_by_index(begin = input_147_begin_0, end = input_147_end_0, end_mask = input_147_end_mask_0, x = var_465_cast_fp16)[name = tensor<string, []>("input_147_cast_fp16")];
            tensor<fp16, [1, 128, 32, 64]> input_149_cast_fp16 = relu(x = input_147_cast_fp16)[name = tensor<string, []>("input_149_cast_fp16")];
            tensor<fp16, [128]> instruments_1_up2_3_weight_to_fp16 = const()[name = tensor<string, []>("instruments_1_up2_3_weight_to_fp16"), val = tensor<fp16, [128]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(38222272)))];
            tensor<fp16, [128]> instruments_1_up2_3_bias_to_fp16 = const()[name = tensor<string, []>("instruments_1_up2_3_bias_to_fp16"), val = tensor<fp16, [128]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(38222592)))];
            tensor<fp16, [1, 128, 32, 64]> input_151_cast_fp16 = batch_norm(beta = instruments_1_up2_3_bias_to_fp16, epsilon = var_309_to_fp16, gamma = instruments_1_up2_3_weight_to_fp16, mean = instruments_0_down4_act_0_running_mean_to_fp16, variance = instruments_0_down4_act_0_running_var_to_fp16, x = input_149_cast_fp16)[name = tensor<string, []>("input_151_cast_fp16")];
            tensor<bool, []> input_153_interleave_0 = const()[name = tensor<string, []>("input_153_interleave_0"), val = tensor<bool, []>(false)];
            tensor<fp16, [1, 256, 32, 64]> input_153_cast_fp16 = concat(axis = var_315, interleave = input_153_interleave_0, values = (input_119_cast_fp16, input_151_cast_fp16))[name = tensor<string, []>("input_153_cast_fp16")];
            tensor<string, []> x_17_pad_type_0 = const()[name = tensor<string, []>("x_17_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> x_17_strides_0 = const()[name = tensor<string, []>("x_17_strides_0"), val = tensor<int32, [2]>([2, 2])];
            tensor<int32, [4]> x_17_pad_0 = const()[name = tensor<string, []>("x_17_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> x_17_dilations_0 = const()[name = tensor<string, []>("x_17_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> x_17_groups_0 = const()[name = tensor<string, []>("x_17_groups_0"), val = tensor<int32, []>(1)];
            tensor<int32, [4]> x_17_has_output_shape_output_shape_0 = const()[name = tensor<string, []>("x_17_has_output_shape_output_shape_0"), val = tensor<int32, [4]>([1, 64, 67, 131])];
            tensor<fp16, [256, 64, 5, 5]> instruments_1_up3_0_weight_to_fp16 = const()[name = tensor<string, []>("instruments_1_up3_0_weight_to_fp16"), val = tensor<fp16, [256, 64, 5, 5]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(38222912)))];
            tensor<fp16, [64]> instruments_1_up3_0_bias_to_fp16 = const()[name = tensor<string, []>("instruments_1_up3_0_bias_to_fp16"), val = tensor<fp16, [64]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(39042176)))];
            tensor<fp16, [1, 64, 67, 131]> x_17_has_output_shape_cast_fp16 = conv_transpose(bias = instruments_1_up3_0_bias_to_fp16, dilations = x_17_dilations_0, groups = x_17_groups_0, output_shape = x_17_has_output_shape_output_shape_0, pad = x_17_pad_0, pad_type = x_17_pad_type_0, strides = x_17_strides_0, weight = instruments_1_up3_0_weight_to_fp16, x = input_153_cast_fp16)[name = tensor<string, []>("x_17_has_output_shape_cast_fp16")];
            tensor<int32, [4]> var_487_begin_0 = const()[name = tensor<string, []>("op_487_begin_0"), val = tensor<int32, [4]>([0, 0, 1, 0])];
            tensor<int32, [4]> var_487_end_0 = const()[name = tensor<string, []>("op_487_end_0"), val = tensor<int32, [4]>([1, 64, 65, 131])];
            tensor<bool, [4]> var_487_end_mask_0 = const()[name = tensor<string, []>("op_487_end_mask_0"), val = tensor<bool, [4]>([true, true, false, true])];
            tensor<fp16, [1, 64, 64, 131]> var_487_cast_fp16 = slice_by_index(begin = var_487_begin_0, end = var_487_end_0, end_mask = var_487_end_mask_0, x = x_17_has_output_shape_cast_fp16)[name = tensor<string, []>("op_487_cast_fp16")];
            tensor<int32, [4]> input_155_begin_0 = const()[name = tensor<string, []>("input_155_begin_0"), val = tensor<int32, [4]>([0, 0, 0, 1])];
            tensor<int32, [4]> input_155_end_0 = const()[name = tensor<string, []>("input_155_end_0"), val = tensor<int32, [4]>([1, 64, 64, 129])];
            tensor<bool, [4]> input_155_end_mask_0 = const()[name = tensor<string, []>("input_155_end_mask_0"), val = tensor<bool, [4]>([true, true, true, false])];
            tensor<fp16, [1, 64, 64, 128]> input_155_cast_fp16 = slice_by_index(begin = input_155_begin_0, end = input_155_end_0, end_mask = input_155_end_mask_0, x = var_487_cast_fp16)[name = tensor<string, []>("input_155_cast_fp16")];
            tensor<fp16, [1, 64, 64, 128]> input_157_cast_fp16 = relu(x = input_155_cast_fp16)[name = tensor<string, []>("input_157_cast_fp16")];
            tensor<fp16, [64]> instruments_1_up3_3_running_mean_to_fp16 = const()[name = tensor<string, []>("instruments_1_up3_3_running_mean_to_fp16"), val = tensor<fp16, [64]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(39042368)))];
            tensor<fp16, [64]> instruments_1_up3_3_running_var_to_fp16 = const()[name = tensor<string, []>("instruments_1_up3_3_running_var_to_fp16"), val = tensor<fp16, [64]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(39042560)))];
            tensor<fp16, [64]> instruments_1_up3_3_weight_to_fp16 = const()[name = tensor<string, []>("instruments_1_up3_3_weight_to_fp16"), val = tensor<fp16, [64]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(39042752)))];
            tensor<fp16, [64]> instruments_1_up3_3_bias_to_fp16 = const()[name = tensor<string, []>("instruments_1_up3_3_bias_to_fp16"), val = tensor<fp16, [64]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(39042944)))];
            tensor<fp16, [1, 64, 64, 128]> input_159_cast_fp16 = batch_norm(beta = instruments_1_up3_3_bias_to_fp16, epsilon = var_309_to_fp16, gamma = instruments_1_up3_3_weight_to_fp16, mean = instruments_1_up3_3_running_mean_to_fp16, variance = instruments_1_up3_3_running_var_to_fp16, x = input_157_cast_fp16)[name = tensor<string, []>("input_159_cast_fp16")];
            tensor<bool, []> input_161_interleave_0 = const()[name = tensor<string, []>("input_161_interleave_0"), val = tensor<bool, []>(false)];
            tensor<fp16, [1, 128, 64, 128]> input_161_cast_fp16 = concat(axis = var_315, interleave = input_161_interleave_0, values = (input_111_cast_fp16, input_159_cast_fp16))[name = tensor<string, []>("input_161_cast_fp16")];
            tensor<string, []> x_19_pad_type_0 = const()[name = tensor<string, []>("x_19_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> x_19_strides_0 = const()[name = tensor<string, []>("x_19_strides_0"), val = tensor<int32, [2]>([2, 2])];
            tensor<int32, [4]> x_19_pad_0 = const()[name = tensor<string, []>("x_19_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> x_19_dilations_0 = const()[name = tensor<string, []>("x_19_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> x_19_groups_0 = const()[name = tensor<string, []>("x_19_groups_0"), val = tensor<int32, []>(1)];
            tensor<int32, [4]> x_19_has_output_shape_output_shape_0 = const()[name = tensor<string, []>("x_19_has_output_shape_output_shape_0"), val = tensor<int32, [4]>([1, 32, 131, 259])];
            tensor<fp16, [128, 32, 5, 5]> instruments_1_up4_0_weight_to_fp16 = const()[name = tensor<string, []>("instruments_1_up4_0_weight_to_fp16"), val = tensor<fp16, [128, 32, 5, 5]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(39043136)))];
            tensor<fp16, [32]> instruments_1_up4_0_bias_to_fp16 = const()[name = tensor<string, []>("instruments_1_up4_0_bias_to_fp16"), val = tensor<fp16, [32]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(39248000)))];
            tensor<fp16, [1, 32, 131, 259]> x_19_has_output_shape_cast_fp16 = conv_transpose(bias = instruments_1_up4_0_bias_to_fp16, dilations = x_19_dilations_0, groups = x_19_groups_0, output_shape = x_19_has_output_shape_output_shape_0, pad = x_19_pad_0, pad_type = x_19_pad_type_0, strides = x_19_strides_0, weight = instruments_1_up4_0_weight_to_fp16, x = input_161_cast_fp16)[name = tensor<string, []>("x_19_has_output_shape_cast_fp16")];
            tensor<int32, [4]> var_509_begin_0 = const()[name = tensor<string, []>("op_509_begin_0"), val = tensor<int32, [4]>([0, 0, 1, 0])];
            tensor<int32, [4]> var_509_end_0 = const()[name = tensor<string, []>("op_509_end_0"), val = tensor<int32, [4]>([1, 32, 129, 259])];
            tensor<bool, [4]> var_509_end_mask_0 = const()[name = tensor<string, []>("op_509_end_mask_0"), val = tensor<bool, [4]>([true, true, false, true])];
            tensor<fp16, [1, 32, 128, 259]> var_509_cast_fp16 = slice_by_index(begin = var_509_begin_0, end = var_509_end_0, end_mask = var_509_end_mask_0, x = x_19_has_output_shape_cast_fp16)[name = tensor<string, []>("op_509_cast_fp16")];
            tensor<int32, [4]> input_163_begin_0 = const()[name = tensor<string, []>("input_163_begin_0"), val = tensor<int32, [4]>([0, 0, 0, 1])];
            tensor<int32, [4]> input_163_end_0 = const()[name = tensor<string, []>("input_163_end_0"), val = tensor<int32, [4]>([1, 32, 128, 257])];
            tensor<bool, [4]> input_163_end_mask_0 = const()[name = tensor<string, []>("input_163_end_mask_0"), val = tensor<bool, [4]>([true, true, true, false])];
            tensor<fp16, [1, 32, 128, 256]> input_163_cast_fp16 = slice_by_index(begin = input_163_begin_0, end = input_163_end_0, end_mask = input_163_end_mask_0, x = var_509_cast_fp16)[name = tensor<string, []>("input_163_cast_fp16")];
            tensor<fp16, [1, 32, 128, 256]> input_165_cast_fp16 = relu(x = input_163_cast_fp16)[name = tensor<string, []>("input_165_cast_fp16")];
            tensor<fp16, [32]> instruments_1_up4_3_running_mean_to_fp16 = const()[name = tensor<string, []>("instruments_1_up4_3_running_mean_to_fp16"), val = tensor<fp16, [32]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(39248128)))];
            tensor<fp16, [32]> instruments_1_up4_3_running_var_to_fp16 = const()[name = tensor<string, []>("instruments_1_up4_3_running_var_to_fp16"), val = tensor<fp16, [32]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(39248256)))];
            tensor<fp16, [32]> instruments_1_up4_3_weight_to_fp16 = const()[name = tensor<string, []>("instruments_1_up4_3_weight_to_fp16"), val = tensor<fp16, [32]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(39248384)))];
            tensor<fp16, [32]> instruments_1_up4_3_bias_to_fp16 = const()[name = tensor<string, []>("instruments_1_up4_3_bias_to_fp16"), val = tensor<fp16, [32]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(39248512)))];
            tensor<fp16, [1, 32, 128, 256]> u4_cast_fp16 = batch_norm(beta = instruments_1_up4_3_bias_to_fp16, epsilon = var_309_to_fp16, gamma = instruments_1_up4_3_weight_to_fp16, mean = instruments_1_up4_3_running_mean_to_fp16, variance = instruments_1_up4_3_running_var_to_fp16, x = input_165_cast_fp16)[name = tensor<string, []>("u4_cast_fp16")];
            tensor<bool, []> input_167_interleave_0 = const()[name = tensor<string, []>("input_167_interleave_0"), val = tensor<bool, []>(false)];
            tensor<fp16, [1, 64, 128, 256]> input_167_cast_fp16 = concat(axis = var_315, interleave = input_167_interleave_0, values = (input_103_cast_fp16, u4_cast_fp16))[name = tensor<string, []>("input_167_cast_fp16")];
            tensor<string, []> x_21_pad_type_0 = const()[name = tensor<string, []>("x_21_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> x_21_strides_0 = const()[name = tensor<string, []>("x_21_strides_0"), val = tensor<int32, [2]>([2, 2])];
            tensor<int32, [4]> x_21_pad_0 = const()[name = tensor<string, []>("x_21_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> x_21_dilations_0 = const()[name = tensor<string, []>("x_21_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> x_21_groups_0 = const()[name = tensor<string, []>("x_21_groups_0"), val = tensor<int32, []>(1)];
            tensor<int32, [4]> x_21_has_output_shape_output_shape_0 = const()[name = tensor<string, []>("x_21_has_output_shape_output_shape_0"), val = tensor<int32, [4]>([1, 16, 259, 515])];
            tensor<fp16, [64, 16, 5, 5]> instruments_1_up5_0_weight_to_fp16 = const()[name = tensor<string, []>("instruments_1_up5_0_weight_to_fp16"), val = tensor<fp16, [64, 16, 5, 5]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(39248640)))];
            tensor<fp16, [16]> instruments_1_up5_0_bias_to_fp16 = const()[name = tensor<string, []>("instruments_1_up5_0_bias_to_fp16"), val = tensor<fp16, [16]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(39299904)))];
            tensor<fp16, [1, 16, 259, 515]> x_21_has_output_shape_cast_fp16 = conv_transpose(bias = instruments_1_up5_0_bias_to_fp16, dilations = x_21_dilations_0, groups = x_21_groups_0, output_shape = x_21_has_output_shape_output_shape_0, pad = x_21_pad_0, pad_type = x_21_pad_type_0, strides = x_21_strides_0, weight = instruments_1_up5_0_weight_to_fp16, x = input_167_cast_fp16)[name = tensor<string, []>("x_21_has_output_shape_cast_fp16")];
            tensor<int32, [4]> var_530_begin_0 = const()[name = tensor<string, []>("op_530_begin_0"), val = tensor<int32, [4]>([0, 0, 1, 0])];
            tensor<int32, [4]> var_530_end_0 = const()[name = tensor<string, []>("op_530_end_0"), val = tensor<int32, [4]>([1, 16, 257, 515])];
            tensor<bool, [4]> var_530_end_mask_0 = const()[name = tensor<string, []>("op_530_end_mask_0"), val = tensor<bool, [4]>([true, true, false, true])];
            tensor<fp16, [1, 16, 256, 515]> var_530_cast_fp16 = slice_by_index(begin = var_530_begin_0, end = var_530_end_0, end_mask = var_530_end_mask_0, x = x_21_has_output_shape_cast_fp16)[name = tensor<string, []>("op_530_cast_fp16")];
            tensor<int32, [4]> input_169_begin_0 = const()[name = tensor<string, []>("input_169_begin_0"), val = tensor<int32, [4]>([0, 0, 0, 1])];
            tensor<int32, [4]> input_169_end_0 = const()[name = tensor<string, []>("input_169_end_0"), val = tensor<int32, [4]>([1, 16, 256, 513])];
            tensor<bool, [4]> input_169_end_mask_0 = const()[name = tensor<string, []>("input_169_end_mask_0"), val = tensor<bool, [4]>([true, true, true, false])];
            tensor<fp16, [1, 16, 256, 512]> input_169_cast_fp16 = slice_by_index(begin = input_169_begin_0, end = input_169_end_0, end_mask = input_169_end_mask_0, x = var_530_cast_fp16)[name = tensor<string, []>("input_169_cast_fp16")];
            tensor<fp16, [1, 16, 256, 512]> input_171_cast_fp16 = relu(x = input_169_cast_fp16)[name = tensor<string, []>("input_171_cast_fp16")];
            tensor<fp16, [16]> instruments_1_up5_3_running_mean_to_fp16 = const()[name = tensor<string, []>("instruments_1_up5_3_running_mean_to_fp16"), val = tensor<fp16, [16]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(39300032)))];
            tensor<fp16, [16]> instruments_1_up5_3_running_var_to_fp16 = const()[name = tensor<string, []>("instruments_1_up5_3_running_var_to_fp16"), val = tensor<fp16, [16]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(39300160)))];
            tensor<fp16, [16]> instruments_1_up5_3_weight_to_fp16 = const()[name = tensor<string, []>("instruments_1_up5_3_weight_to_fp16"), val = tensor<fp16, [16]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(39300288)))];
            tensor<fp16, [16]> instruments_1_up5_3_bias_to_fp16 = const()[name = tensor<string, []>("instruments_1_up5_3_bias_to_fp16"), val = tensor<fp16, [16]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(39300416)))];
            tensor<fp16, [1, 16, 256, 512]> u5_cast_fp16 = batch_norm(beta = instruments_1_up5_3_bias_to_fp16, epsilon = var_309_to_fp16, gamma = instruments_1_up5_3_weight_to_fp16, mean = instruments_1_up5_3_running_mean_to_fp16, variance = instruments_1_up5_3_running_var_to_fp16, x = input_171_cast_fp16)[name = tensor<string, []>("u5_cast_fp16")];
            tensor<bool, []> input_173_interleave_0 = const()[name = tensor<string, []>("input_173_interleave_0"), val = tensor<bool, []>(false)];
            tensor<fp16, [1, 32, 256, 512]> input_173_cast_fp16 = concat(axis = var_315, interleave = input_173_interleave_0, values = (input_95_cast_fp16, u5_cast_fp16))[name = tensor<string, []>("input_173_cast_fp16")];
            tensor<string, []> x_pad_type_0 = const()[name = tensor<string, []>("x_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> x_strides_0 = const()[name = tensor<string, []>("x_strides_0"), val = tensor<int32, [2]>([2, 2])];
            tensor<int32, [4]> x_pad_0 = const()[name = tensor<string, []>("x_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> x_dilations_0 = const()[name = tensor<string, []>("x_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> x_groups_0 = const()[name = tensor<string, []>("x_groups_0"), val = tensor<int32, []>(1)];
            tensor<int32, [4]> x_has_output_shape_output_shape_0 = const()[name = tensor<string, []>("x_has_output_shape_output_shape_0"), val = tensor<int32, [4]>([1, 1, 515, 1027])];
            tensor<fp16, [32, 1, 5, 5]> instruments_1_up6_0_weight_to_fp16 = const()[name = tensor<string, []>("instruments_1_up6_0_weight_to_fp16"), val = tensor<fp16, [32, 1, 5, 5]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(39300544)))];
            tensor<fp16, [1]> instruments_1_up6_0_bias_to_fp16 = const()[name = tensor<string, []>("instruments_1_up6_0_bias_to_fp16"), val = tensor<fp16, [1]>([0x1.f7p-1])];
            tensor<fp16, [1, 1, 515, 1027]> x_has_output_shape_cast_fp16 = conv_transpose(bias = instruments_1_up6_0_bias_to_fp16, dilations = x_dilations_0, groups = x_groups_0, output_shape = x_has_output_shape_output_shape_0, pad = x_pad_0, pad_type = x_pad_type_0, strides = x_strides_0, weight = instruments_1_up6_0_weight_to_fp16, x = input_173_cast_fp16)[name = tensor<string, []>("x_has_output_shape_cast_fp16")];
            tensor<int32, [4]> var_551_begin_0 = const()[name = tensor<string, []>("op_551_begin_0"), val = tensor<int32, [4]>([0, 0, 1, 0])];
            tensor<int32, [4]> var_551_end_0 = const()[name = tensor<string, []>("op_551_end_0"), val = tensor<int32, [4]>([1, 1, 513, 1027])];
            tensor<bool, [4]> var_551_end_mask_0 = const()[name = tensor<string, []>("op_551_end_mask_0"), val = tensor<bool, [4]>([true, true, false, true])];
            tensor<fp16, [1, 1, 512, 1027]> var_551_cast_fp16 = slice_by_index(begin = var_551_begin_0, end = var_551_end_0, end_mask = var_551_end_mask_0, x = x_has_output_shape_cast_fp16)[name = tensor<string, []>("op_551_cast_fp16")];
            tensor<int32, [4]> input_175_begin_0 = const()[name = tensor<string, []>("input_175_begin_0"), val = tensor<int32, [4]>([0, 0, 0, 1])];
            tensor<int32, [4]> input_175_end_0 = const()[name = tensor<string, []>("input_175_end_0"), val = tensor<int32, [4]>([1, 1, 512, 1025])];
            tensor<bool, [4]> input_175_end_mask_0 = const()[name = tensor<string, []>("input_175_end_mask_0"), val = tensor<bool, [4]>([true, true, true, false])];
            tensor<fp16, [1, 1, 512, 1024]> input_175_cast_fp16 = slice_by_index(begin = input_175_begin_0, end = input_175_end_0, end_mask = input_175_end_mask_0, x = var_551_cast_fp16)[name = tensor<string, []>("input_175_cast_fp16")];
            tensor<fp16, [1, 1, 512, 1024]> input_177_cast_fp16 = relu(x = input_175_cast_fp16)[name = tensor<string, []>("input_177_cast_fp16")];
            tensor<fp16, [1]> instruments_1_up6_3_running_mean_to_fp16 = const()[name = tensor<string, []>("instruments_1_up6_3_running_mean_to_fp16"), val = tensor<fp16, [1]>([0x0p+0])];
            tensor<fp16, [1]> instruments_1_up6_3_running_var_to_fp16 = const()[name = tensor<string, []>("instruments_1_up6_3_running_var_to_fp16"), val = tensor<fp16, [1]>([0x1p+0])];
            tensor<fp16, [1]> instruments_1_up6_3_weight_to_fp16 = const()[name = tensor<string, []>("instruments_1_up6_3_weight_to_fp16"), val = tensor<fp16, [1]>([0x1.60cp-6])];
            tensor<fp16, [1]> instruments_1_up6_3_bias_to_fp16 = const()[name = tensor<string, []>("instruments_1_up6_3_bias_to_fp16"), val = tensor<fp16, [1]>([-0x1.f94p-1])];
            tensor<fp16, [1, 1, 512, 1024]> input_179_cast_fp16 = batch_norm(beta = instruments_1_up6_3_bias_to_fp16, epsilon = var_309_to_fp16, gamma = instruments_1_up6_3_weight_to_fp16, mean = instruments_1_up6_3_running_mean_to_fp16, variance = instruments_1_up6_3_running_var_to_fp16, x = input_177_cast_fp16)[name = tensor<string, []>("input_179_cast_fp16")];
            tensor<string, []> input_pad_type_0 = const()[name = tensor<string, []>("input_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_pad_0 = const()[name = tensor<string, []>("input_pad_0"), val = tensor<int32, [4]>([3, 3, 3, 3])];
            tensor<int32, [2]> input_dilations_0 = const()[name = tensor<string, []>("input_dilations_0"), val = tensor<int32, [2]>([2, 2])];
            tensor<int32, [2]> input_strides_0 = const()[name = tensor<string, []>("input_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_groups_0 = const()[name = tensor<string, []>("input_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [2, 1, 4, 4]> instruments_1_up7_0_weight_to_fp16 = const()[name = tensor<string, []>("instruments_1_up7_0_weight_to_fp16"), val = tensor<fp16, [2, 1, 4, 4]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(39302208)))];
            tensor<fp16, [2]> instruments_1_up7_0_bias_to_fp16 = const()[name = tensor<string, []>("instruments_1_up7_0_bias_to_fp16"), val = tensor<fp16, [2]>([0x1.ad8p-1, 0x1.abcp-1])];
            tensor<fp16, [1, 2, 512, 1024]> input_cast_fp16 = conv(bias = instruments_1_up7_0_bias_to_fp16, dilations = input_dilations_0, groups = input_groups_0, pad = input_pad_0, pad_type = input_pad_type_0, strides = input_strides_0, weight = instruments_1_up7_0_weight_to_fp16, x = input_179_cast_fp16)[name = tensor<string, []>("input_cast_fp16")];
            tensor<fp16, [1, 2, 512, 1024]> u7_cast_fp16 = sigmoid(x = input_cast_fp16)[name = tensor<string, []>("u7_cast_fp16")];
            tensor<fp16, [1, 2, 512, 1024]> var_568_cast_fp16 = mul(x = u7_cast_fp16, y = input_1_cast_fp16)[name = tensor<string, []>("op_568_cast_fp16")];
            tensor<fp16, []> var_569_promoted_to_fp16 = const()[name = tensor<string, []>("op_569_promoted_to_fp16"), val = tensor<fp16, []>(0x1p+1)];
            tensor<fp16, [1, 2, 512, 1024]> var_570_cast_fp16 = pow(x = var_304_cast_fp16, y = var_569_promoted_to_fp16)[name = tensor<string, []>("op_570_cast_fp16")];
            tensor<fp16, []> var_571_promoted_to_fp16 = const()[name = tensor<string, []>("op_571_promoted_to_fp16"), val = tensor<fp16, []>(0x1p+1)];
            tensor<fp16, [1, 2, 512, 1024]> var_572_cast_fp16 = pow(x = var_568_cast_fp16, y = var_571_promoted_to_fp16)[name = tensor<string, []>("op_572_cast_fp16")];
            tensor<fp16, [1, 2, 512, 1024]> mask_sum_1_cast_fp16 = add(x = var_570_cast_fp16, y = var_572_cast_fp16)[name = tensor<string, []>("mask_sum_1_cast_fp16")];
            tensor<fp16, []> var_578_to_fp16 = const()[name = tensor<string, []>("op_578_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 2, 512, 1024]> mask_sum_cast_fp16 = add(x = mask_sum_1_cast_fp16, y = var_578_to_fp16)[name = tensor<string, []>("mask_sum_cast_fp16")];
            tensor<fp16, []> var_584_to_fp16 = const()[name = tensor<string, []>("op_584_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 2, 512, 1024]> var_585_cast_fp16 = add(x = var_570_cast_fp16, y = var_584_to_fp16)[name = tensor<string, []>("op_585_cast_fp16")];
            tensor<fp16, [1, 2, 512, 1024]> mask_1_cast_fp16 = real_div(x = var_585_cast_fp16, y = mask_sum_cast_fp16)[name = tensor<string, []>("mask_1_cast_fp16")];
            tensor<int32, [4]> var_589_perm_0 = const()[name = tensor<string, []>("op_589_perm_0"), val = tensor<int32, [4]>([0, 1, 3, 2])];
            tensor<int32, []> var_595 = const()[name = tensor<string, []>("op_595"), val = tensor<int32, []>(3)];
            tensor<bool, []> mask_3_interleave_0 = const()[name = tensor<string, []>("mask_3_interleave_0"), val = tensor<bool, []>(false)];
            tensor<fp16, [1, 2, 1024, 512]> var_589_cast_fp16 = transpose(perm = var_589_perm_0, x = mask_1_cast_fp16)[name = tensor<string, []>("transpose_1")];
            tensor<fp16, [1, 2, 1024, 512]> mask_3_cast_fp16 = concat(axis = var_595, interleave = mask_3_interleave_0, values = var_589_cast_fp16)[name = tensor<string, []>("mask_3_cast_fp16")];
            tensor<int32, [1]> var_598_axes_0 = const()[name = tensor<string, []>("op_598_axes_0"), val = tensor<int32, [1]>([0])];
            tensor<fp16, [2, 1024, 512]> var_598_cast_fp16 = squeeze(axes = var_598_axes_0, x = mask_3_cast_fp16)[name = tensor<string, []>("op_598_cast_fp16")];
            tensor<int32, [3]> var_612_begin_0 = const()[name = tensor<string, []>("op_612_begin_0"), val = tensor<int32, [3]>([0, 0, 0])];
            tensor<int32, [3]> var_612_end_0 = const()[name = tensor<string, []>("op_612_end_0"), val = tensor<int32, [3]>([2, 1024, 216])];
            tensor<bool, [3]> var_612_end_mask_0 = const()[name = tensor<string, []>("op_612_end_mask_0"), val = tensor<bool, [3]>([true, true, false])];
            tensor<fp16, [2, 1024, 216]> var_612_cast_fp16 = slice_by_index(begin = var_612_begin_0, end = var_612_end_0, end_mask = var_612_end_mask_0, x = var_598_cast_fp16)[name = tensor<string, []>("op_612_cast_fp16")];
            tensor<int32, [1]> var_614_axes_0 = const()[name = tensor<string, []>("op_614_axes_0"), val = tensor<int32, [1]>([-1])];
            tensor<fp16, [2, 1024, 216, 1]> var_614_cast_fp16 = expand_dims(axes = var_614_axes_0, x = var_612_cast_fp16)[name = tensor<string, []>("op_614_cast_fp16")];
            tensor<string, []> var_614_cast_fp16_to_fp32_dtype_0 = const()[name = tensor<string, []>("op_614_cast_fp16_to_fp32_dtype_0"), val = tensor<string, []>("fp32")];
            tensor<fp16, []> var_618_to_fp16 = const()[name = tensor<string, []>("op_618_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 2, 512, 1024]> var_619_cast_fp16 = add(x = var_572_cast_fp16, y = var_618_to_fp16)[name = tensor<string, []>("op_619_cast_fp16")];
            tensor<fp16, [1, 2, 512, 1024]> mask_5_cast_fp16 = real_div(x = var_619_cast_fp16, y = mask_sum_cast_fp16)[name = tensor<string, []>("mask_5_cast_fp16")];
            tensor<int32, [4]> var_623_perm_0 = const()[name = tensor<string, []>("op_623_perm_0"), val = tensor<int32, [4]>([0, 1, 3, 2])];
            tensor<int32, []> var_629 = const()[name = tensor<string, []>("op_629"), val = tensor<int32, []>(3)];
            tensor<bool, []> mask_interleave_0 = const()[name = tensor<string, []>("mask_interleave_0"), val = tensor<bool, []>(false)];
            tensor<fp16, [1, 2, 1024, 512]> var_623_cast_fp16 = transpose(perm = var_623_perm_0, x = mask_5_cast_fp16)[name = tensor<string, []>("transpose_0")];
            tensor<fp16, [1, 2, 1024, 512]> mask_cast_fp16 = concat(axis = var_629, interleave = mask_interleave_0, values = var_623_cast_fp16)[name = tensor<string, []>("mask_cast_fp16")];
            tensor<int32, [1]> var_632_axes_0 = const()[name = tensor<string, []>("op_632_axes_0"), val = tensor<int32, [1]>([0])];
            tensor<fp16, [2, 1024, 512]> var_632_cast_fp16 = squeeze(axes = var_632_axes_0, x = mask_cast_fp16)[name = tensor<string, []>("op_632_cast_fp16")];
            tensor<int32, [3]> var_646_begin_0 = const()[name = tensor<string, []>("op_646_begin_0"), val = tensor<int32, [3]>([0, 0, 0])];
            tensor<int32, [3]> var_646_end_0 = const()[name = tensor<string, []>("op_646_end_0"), val = tensor<int32, [3]>([2, 1024, 216])];
            tensor<bool, [3]> var_646_end_mask_0 = const()[name = tensor<string, []>("op_646_end_mask_0"), val = tensor<bool, [3]>([true, true, false])];
            tensor<fp16, [2, 1024, 216]> var_646_cast_fp16 = slice_by_index(begin = var_646_begin_0, end = var_646_end_0, end_mask = var_646_end_mask_0, x = var_632_cast_fp16)[name = tensor<string, []>("op_646_cast_fp16")];
            tensor<int32, [1]> var_648_axes_0 = const()[name = tensor<string, []>("op_648_axes_0"), val = tensor<int32, [1]>([-1])];
            tensor<fp16, [2, 1024, 216, 1]> var_648_cast_fp16 = expand_dims(axes = var_648_axes_0, x = var_646_cast_fp16)[name = tensor<string, []>("op_648_cast_fp16")];
            tensor<string, []> var_648_cast_fp16_to_fp32_dtype_0 = const()[name = tensor<string, []>("op_648_cast_fp16_to_fp32_dtype_0"), val = tensor<string, []>("fp32")];
            tensor<fp32, [2, 1024, 216, 1]> accompanimentMask = cast(dtype = var_648_cast_fp16_to_fp32_dtype_0, x = var_648_cast_fp16)[name = tensor<string, []>("cast_4")];
            tensor<fp32, [2, 1024, 216, 1]> vocalsMask = cast(dtype = var_614_cast_fp16_to_fp32_dtype_0, x = var_614_cast_fp16)[name = tensor<string, []>("cast_5")];
        } -> (vocalsMask, accompanimentMask);
}